
==================== FINAL INTERFACE ====================
2019-11-27 16:35:05.378297 UTC

interface main:MinHS.TypeChecker 8065
  interface hash: 750b8a4a194ea37f2bd5cf1595452d21
  ABI hash: 91389fc2a768feecab432abc8e6d4f91
  export-list hash: e1e045628da09a2924b30cf566df00ac
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1ddb6807e7644b778c8425f1c0170822
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  MinHS.TypeChecker.checkAbs
  MinHS.TypeChecker.checkBind
  MinHS.TypeChecker.checkBinds
  MinHS.TypeChecker.checkBinds'
  MinHS.TypeChecker.checkExp
  MinHS.TypeChecker.constructorType
  MinHS.TypeChecker.initialGamma
  MinHS.TypeChecker.ofKind
  MinHS.TypeChecker.primOpType
  MinHS.TypeChecker.runTC
  MinHS.TypeChecker.shouldCheck
  MinHS.TypeChecker.tyConKind
  MinHS.TypeChecker.typeError
  MinHS.TypeChecker.typeWellformed
  MinHS.TypeChecker.typecheck
  MinHS.TypeChecker.Gamma
  MinHS.TypeChecker.Kind{MinHS.TypeChecker.:=> MinHS.TypeChecker.Star}
  MinHS.TypeChecker.TC{MinHS.TypeChecker.TC}
  MinHS.TypeChecker.TypeError{MinHS.TypeChecker.FunctionTypeExpected MinHS.TypeChecker.KindMismatch MinHS.TypeChecker.NoSuchConstructor MinHS.TypeChecker.NoSuchVariable MinHS.TypeChecker.TypeConstructorSaturated MinHS.TypeChecker.TypeMismatch MinHS.TypeChecker.TypeShouldBeFunction}
module dependencies: MinHS.Env MinHS.Syntax
package dependencies: array-0.5.3.0 base-4.12.0.0
                      containers-0.6.0.1 deepseq-1.4.4.0 ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Set.Internal
import  -/  base-4.12.0.0:Control.Applicative 2ae514eb141d45774730765c61bb41c0
import  -/  base-4.12.0.0:Control.Monad 07eaec7fd256019b318d048d00f45b1c
import  -/  base-4.12.0.0:Control.Monad.Fail e3390d20cbc1146ebe051d327f964e5d
import  -/  base-4.12.0.0:Data.Either 423bee738f25e5ee983d072216009be8
import  -/  base-4.12.0.0:Data.Functor 069b2025a03e32fd228e74a86a58a075
import  -/  base-4.12.0.0:Data.Traversable d2c09bff1e4f0c871306c3ff8aa4dc36
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Err ea5e313ef4146b40b5d8b27aa168e736
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  MinHS.Env eae3185025ce79ed8ae1138f3f477a7d
  exports: 58761e22b848d1b7f63eec103cbf4218
  Env a13fb1d9beea6335287d3e1c994513b6
  add 8b2a248650652b2fd93d435490361512
  addAll 75018840864f25ccf936a44cfd20c9e2
  empty fc484fd8b19330175de897fc0d5c766f
  lookup 5b252a679c10b8095a7c6c1d26a14b61
import  -/  MinHS.Syntax 447a76bcbaa84d665d69cc7e0e8d8b2e
  exports: e10a7abab3550ee043451a4464e0ceb9
  App 450e78b6f9d138f0e9b290a2a467bde7
  Arrow 03b585286ac3a7b0ffffb5e2a4798fef
  Bind 8ae10d2aa36632c0e4216d49450ff8be
  Bind b4b37fd63bccc01b50bb6c9cffa3a40f
  Bool 8df02c9eb2a73fc2c368dda0df5e6f34
  Con 77e751ec106d83f5b788a54ad68c83ea
  Eq a21636ce6e068e4614f105e517b8161c
  Exp b4b37fd63bccc01b50bb6c9cffa3a40f
  Ge 6bb04f915d158d5e707057b8fd89bb47
  Gt 5ca74abd4542cf1eceb3bd5e92b7e576
  Head 0f58e63c8316c5d9c47c7d72d17bdf06
  Id 39dd4c711cd200360082729e5c3a320f
  If 8b48803be389da2c64dfb141660b9005
  Int a62d87095cc901483d3b1ae9ad4fad45
  Le f418c293f62e30e2302c91869d223df8
  Let 70c2b45138fbd89248e29d4e3790961f
  Letrec a9689e0b13c9d79af8e75757bfc8e67e
  List 358d9aa177e9599d795b89ab80a1f84e
  Lt a13ade0eb568346efe2524da0367490e
  Ne 889796b1d96ad944bf4d7b1b3b8b8455
  Neg d8789a3c009f8d2932b1c53c86d1b35b
  Null 9bbe29603c19fe77f1705bdc2ac8660f
  Num 0f9da46b0be6efb45b174e7336aa60d9
  Op 560e6dd71080990bb3fa12f894a4520e
  Prim 862854f4f9e63d3d1f1ef23b578e1721
  Program 3721bad1282c68adddd2da4e334f5a6a
  Recfun 3ae6ee91233cc735d78edfd8fc06737e
  Tail ea3b189a5857e7d7cabd062fd9d8f0fa
  TyCon 665d9f7fe5bc7436fedc7e78fa9f86ea
  Type 8a48b99da0e480665b4cdb2a758a43ab
  TypeApp 8330008766e7ff4aa947f9e5c53ccfda
  TypeCon c8c58c61c6b2a97cb5e1336eac0583be
  Var 916f07987fceb7d87579f524fcd644ee
9f9e038ae394bb618ece511c132c879f
  $fApplicativeTC :: GHC.Base.Applicative MinHS.TypeChecker.TC
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.TypeChecker.TC
                  MinHS.TypeChecker.$fFunctorTC
                  (Data.Either.Right @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R ->_R Sym (MinHS.TypeChecker.N:TC[0]) <a>_N)
                  (Data.Either.$fApplicativeEither_$c<*>
                     @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (MinHS.TypeChecker.N:TC[0]) <a -> b>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <a>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N)
                  (Data.Either.$fApplicativeEither_$cliftA2
                     @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <a>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <c>_N)
                  (Data.Either.$fApplicativeEither_$c*>
                     @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (MinHS.TypeChecker.N:TC[0]) <a>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N)
                  (Data.Either.$fApplicativeEither_$c<*
                     @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (MinHS.TypeChecker.N:TC[0]) <a>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <a>_N) -}
0cdcf92b7ecbe124b4cae11e10f6dabb
  $fEqKind :: GHC.Classes.Eq MinHS.TypeChecker.Kind
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.TypeChecker.Kind
                  MinHS.TypeChecker.$fEqKind_$c==
                  MinHS.TypeChecker.$fEqKind_$c/= -}
0cdcf92b7ecbe124b4cae11e10f6dabb
  $fEqKind_$c/= ::
    MinHS.TypeChecker.Kind -> MinHS.TypeChecker.Kind -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MinHS.TypeChecker.Kind) (y :: MinHS.TypeChecker.Kind) ->
                 case MinHS.TypeChecker.$fEqKind_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0cdcf92b7ecbe124b4cae11e10f6dabb
  $fEqKind_$c== ::
    MinHS.TypeChecker.Kind -> MinHS.TypeChecker.Kind -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
9f9e038ae394bb618ece511c132c879f
  $fFunctorTC :: GHC.Base.Functor MinHS.TypeChecker.TC
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.TypeChecker.TC
                  (Data.Either.$fApplicativeEither_$cfmap
                     @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <a>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N)
                  (Data.Either.$fFunctorEither_$c<$ @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <a>_N) -}
9f9e038ae394bb618ece511c132c879f
  $fMonadFailTC :: Control.Monad.Fail.MonadFail MinHS.TypeChecker.TC
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.TypeChecker.TC
                  MinHS.TypeChecker.$fMonadTC
                  MinHS.TypeChecker.$fMonadFailTC_$cfail -}
9f9e038ae394bb618ece511c132c879f
  $fMonadFailTC_$cfail :: GHC.Base.String -> MinHS.TypeChecker.TC a
  {- Arity: 1, Strictness: <B,U>x -}
9f9e038ae394bb618ece511c132c879f
  $fMonadTC :: GHC.Base.Monad MinHS.TypeChecker.TC
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.TypeChecker.TC
                  MinHS.TypeChecker.$fApplicativeTC
                  (Data.Either.$fMonadEither_$c>>= @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (MinHS.TypeChecker.N:TC[0]) <a>_N
                   ->_R (<a>_R ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N)
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N)
                  (Data.Either.$fMonadEither_$c>> @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (MinHS.TypeChecker.N:TC[0]) <a>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N)
                  (Data.Either.Right @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R ->_R Sym (MinHS.TypeChecker.N:TC[0]) <a>_N)
                  (\ @ a ->
                   GHC.Err.errorWithoutStackTrace
                     @ 'GHC.Types.LiftedRep
                     @ (Data.Either.Either MinHS.TypeChecker.TypeError a))
                    `cast`
                  (forall (a :: <*>_N).
                   <[GHC.Types.Char]>_R ->_R Sym (MinHS.TypeChecker.N:TC[0]) <a>_N) -}
0cdcf92b7ecbe124b4cae11e10f6dabb
  $fShowKind :: GHC.Show.Show MinHS.TypeChecker.Kind
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.TypeChecker.Kind
                  MinHS.TypeChecker.$fShowKind_$cshowsPrec
                  MinHS.TypeChecker.$fShowKind_$cshow
                  MinHS.TypeChecker.$fShowKind_$cshowList -}
0cdcf92b7ecbe124b4cae11e10f6dabb
  $fShowKind1 :: MinHS.TypeChecker.Kind -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (MinHS.TypeChecker.$fShowKind_$cshowsPrec
                   MinHS.TypeChecker.$fShowKind2) -}
b70243863272a85ef50094ab346c9191
  $fShowKind2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
0cdcf92b7ecbe124b4cae11e10f6dabb
  $fShowKind_$cshow :: MinHS.TypeChecker.Kind -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MinHS.TypeChecker.Kind) ->
                 MinHS.TypeChecker.$fShowKind_$cshowsPrec
                   MinHS.TypeChecker.$fShowKind2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0cdcf92b7ecbe124b4cae11e10f6dabb
  $fShowKind_$cshowList :: [MinHS.TypeChecker.Kind] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MinHS.TypeChecker.Kind]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MinHS.TypeChecker.Kind
                   MinHS.TypeChecker.$fShowKind1
                   ls
                   s) -}
0cdcf92b7ecbe124b4cae11e10f6dabb
  $fShowKind_$cshowsPrec ::
    GHC.Types.Int -> MinHS.TypeChecker.Kind -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
68f75ef7d40c61f64651a42a2be74897
  $fShowTypeError :: GHC.Show.Show MinHS.TypeChecker.TypeError
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.TypeChecker.TypeError
                  MinHS.TypeChecker.$fShowTypeError_$cshowsPrec
                  MinHS.TypeChecker.$fShowTypeError_$cshow
                  MinHS.TypeChecker.$fShowTypeError_$cshowList -}
68f75ef7d40c61f64651a42a2be74897
  $fShowTypeError1 :: MinHS.TypeChecker.TypeError -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: MinHS.TypeChecker.TypeError) ->
                 MinHS.TypeChecker.$w$cshowsPrec 0# w) -}
68f75ef7d40c61f64651a42a2be74897
  $fShowTypeError_$cshow ::
    MinHS.TypeChecker.TypeError -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MinHS.TypeChecker.TypeError) ->
                 MinHS.TypeChecker.$fShowTypeError_$cshowsPrec
                   MinHS.TypeChecker.$fShowKind2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
68f75ef7d40c61f64651a42a2be74897
  $fShowTypeError_$cshowList ::
    [MinHS.TypeChecker.TypeError] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MinHS.TypeChecker.TypeError]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MinHS.TypeChecker.TypeError
                   MinHS.TypeChecker.$fShowTypeError1
                   ls
                   s) -}
68f75ef7d40c61f64651a42a2be74897
  $fShowTypeError_$cshowsPrec ::
    GHC.Types.Int -> MinHS.TypeChecker.TypeError -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: MinHS.TypeChecker.TypeError) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MinHS.TypeChecker.$w$cshowsPrec ww1 w1 }) -}
b622913ba83f06ca2e63c638dcacde56
  $tc':=> :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5022801044564707393##
                   7847687083239162463##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc':=>2
                   0#
                   MinHS.TypeChecker.$tc':=>1) -}
46624b30c1155d23979bde19a6029945
  $tc':=>1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
879bdbcf4d2e7b7410a8b9006e69caf2
  $tc':=>2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.TypeChecker.$tc':=>3) -}
6a1bc9d944ce5e23f02d772663ae1743
  $tc':=>3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("':=>"#) -}
20ee25732c1d132d323ca6189002f398
  $tc'FunctionTypeExpected :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2486739259225883638##
                   1792900755776436139##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc'FunctionTypeExpected2
                   0#
                   MinHS.TypeChecker.$tc'FunctionTypeExpected1) -}
f54487d2024d4a1b83ca65e682bfdec7
  $tc'FunctionTypeExpected1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a7f8449685b66d66049bf9c244c7a2ae
  $tc'FunctionTypeExpected2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MinHS.TypeChecker.$tc'FunctionTypeExpected3) -}
edf0a1c2b7d523ba7be02fb02c9b7827
  $tc'FunctionTypeExpected3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FunctionTypeExpected"#) -}
64877ed6f901f6e6bc4fc0a2a3f4570e
  $tc'KindMismatch :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6336332359751585414##
                   12836356519195610508##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc'KindMismatch2
                   0#
                   MinHS.TypeChecker.$tc'KindMismatch1) -}
fc15bc4d3e5d71cc9c554c145c8294d0
  $tc'KindMismatch1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
07eb95427f282acec5b9f48515487581
  $tc'KindMismatch2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MinHS.TypeChecker.$tc'KindMismatch3) -}
f8cba7e9a9ea0fe0df1440731afbbdff
  $tc'KindMismatch3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'KindMismatch"#) -}
c5ebc18a1e30cdf348ccee8d6c0131a5
  $tc'NoSuchConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6479986079862549799##
                   16695413856069531004##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc'NoSuchConstructor2
                   0#
                   MinHS.TypeChecker.$tc'NoSuchConstructor1) -}
d35bcf95d046671eab5999358d766f8f
  $tc'NoSuchConstructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
aebdf1b0ebae7897482283164fa7c9fd
  $tc'NoSuchConstructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MinHS.TypeChecker.$tc'NoSuchConstructor3) -}
cfe3e07320e92cc44c985cc0c28a804e
  $tc'NoSuchConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NoSuchConstructor"#) -}
470ea276d821d14b872f83eec47b55d3
  $tc'NoSuchVariable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10905074502810184789##
                   4712922470111671306##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc'NoSuchVariable1
                   0#
                   MinHS.TypeChecker.$tc'NoSuchConstructor1) -}
c64c4be09b6d37c010f5dc97582e1240
  $tc'NoSuchVariable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MinHS.TypeChecker.$tc'NoSuchVariable2) -}
55eb32537722018b153bb94d037f9cc8
  $tc'NoSuchVariable2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NoSuchVariable"#) -}
1ba110f9055a5545c0121c6a7b404cc9
  $tc'Star :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10997098330233547486##
                   15210265982525344054##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc'Star2
                   0#
                   MinHS.TypeChecker.$tc'Star1) -}
594fb42b02337645a673723d2b3b2769
  $tc'Star1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
314d971e0993dcaa7741e23efe8cd1f4
  $tc'Star2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.TypeChecker.$tc'Star3) -}
c977f6a3e79fa8cb940f906fbdb27076
  $tc'Star3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Star"#) -}
6f36d68501ec964f7ece6d5c3d2dcfc9
  $tc'TC :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8686903593722347275##
                   2465225680945256309##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc'TC2
                   1#
                   MinHS.TypeChecker.$tc'TC1) -}
77507beabd960e47967c34907f7e22b5
  $tc'TC1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
05d1e71399247a8e318465f33e516aa0
  $tc'TC2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.TypeChecker.$tc'TC3) -}
df6fd7ee26984f14e33aa9c48f7eba4c
  $tc'TC3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TC"#) -}
4d1144b356067899ab0ef81668d26696
  $tc'TypeConstructorSaturated :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2796567205298860562##
                   15047486090579089390##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc'TypeConstructorSaturated2
                   0#
                   MinHS.TypeChecker.$tc'TypeConstructorSaturated1) -}
7f24b075e1574891d97c796d1d1a79c3
  $tc'TypeConstructorSaturated1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0e8b07f06d56d3a8110bd82eae5122bd
  $tc'TypeConstructorSaturated2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MinHS.TypeChecker.$tc'TypeConstructorSaturated3) -}
1a13451ddeb17f77f04a37e73769f603
  $tc'TypeConstructorSaturated3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeConstructorSaturated"#) -}
f07480848f8a771e6e6db33ddf6ccbd3
  $tc'TypeMismatch :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   158007472044668955##
                   15896031173095695876##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc'TypeMismatch2
                   0#
                   MinHS.TypeChecker.$tc'TypeMismatch1) -}
58c633b353278a05a8edbc4b2f44f0f0
  $tc'TypeMismatch1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f3681d41ced4ea3d35f8c0ea72c2944b
  $tc'TypeMismatch2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MinHS.TypeChecker.$tc'TypeMismatch3) -}
516360b550cdfda37f7a08854418c044
  $tc'TypeMismatch3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeMismatch"#) -}
eefec4a11a3d998e037ad097ebad9538
  $tc'TypeShouldBeFunction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15877271452497192382##
                   18255835183390916201##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc'TypeShouldBeFunction2
                   0#
                   MinHS.TypeChecker.$tc'TypeShouldBeFunction1) -}
acb44c8f135675e7e2dc8868c6ba91c1
  $tc'TypeShouldBeFunction1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c347d1d5e347923036b0e6da28e3f973
  $tc'TypeShouldBeFunction2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MinHS.TypeChecker.$tc'TypeShouldBeFunction3) -}
1d01d90f5f0447761b87bbfc5f132fcd
  $tc'TypeShouldBeFunction3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeShouldBeFunction"#) -}
10b93c2f9f647df86fc68e56d3e115a1
  $tcKind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7974146932028047969##
                   13520552342000526880##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tcKind1
                   0#
                   GHC.Types.krep$*) -}
50ae6633e77b46473291575036ce9aae
  $tcKind1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.TypeChecker.$tcKind2) -}
70aedb0dfe5fed6e337bcfa17161862c
  $tcKind2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Kind"#) -}
dbe4c3a6db3c232f0d4eada1e4136829
  $tcTC :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3180535844028306939##
                   5248517211857701115##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tcTC1
                   0#
                   GHC.Types.krep$*Arr*) -}
9bd643b2d247cbae872f3e38f77c5a02
  $tcTC1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.TypeChecker.$tcTC2) -}
3228f3aeea3b29b9f23c289d1ec009a6
  $tcTC2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TC"#) -}
43f09318a343898a752a1aaab9a9fd94
  $tcTypeError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6755013464549278413##
                   15607231255923894209##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tcTypeError1
                   0#
                   GHC.Types.krep$*) -}
a92f75d927e90576fff73158f1e0da85
  $tcTypeError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.TypeChecker.$tcTypeError2) -}
8bf3a78fab30b8e70dd5152c3b1b95a1
  $tcTypeError2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeError"#) -}
2f8ddc41b322af1cd478ac1ed4ad18de
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MinHS.TypeChecker.$trModule3
                   MinHS.TypeChecker.$trModule1) -}
ed6eff26efb35b364aec573060ae7787
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.TypeChecker.$trModule2) -}
f4bc796239c0697a3002c61063290ff7
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MinHS.TypeChecker"#) -}
7ee21136e140ebd7f06836cf4cf8a0c4
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.TypeChecker.$trModule4) -}
0672efe282607593a24a8d3cb0b38953
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
68f75ef7d40c61f64651a42a2be74897
  $w$cshowsPrec ::
    GHC.Prim.Int# -> MinHS.TypeChecker.TypeError -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [2] -}
473f613e6ddbc46f88ffe1d9f3a23aba
  $wcheckAbs ::
    MinHS.TypeChecker.Gamma
    -> MinHS.Syntax.Id
    -> MinHS.Syntax.Type
    -> [MinHS.Syntax.Id]
    -> MinHS.Syntax.Exp
    -> MinHS.TypeChecker.TC ()
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><S,1*U><L,U>,
     Inline: [2] -}
3304f682d619fe6c070ca83120a984f9
  $wcheckBind ::
    MinHS.TypeChecker.Gamma
    -> MinHS.Syntax.Id
    -> MinHS.Syntax.Type
    -> [MinHS.Syntax.Id]
    -> MinHS.Syntax.Exp
    -> MinHS.TypeChecker.TC (MinHS.Syntax.Id, MinHS.Syntax.Type)
  {- Arity: 5, Strictness: <L,U><L,U><S,U><L,1*U><L,U>, Inline: [2],
     Unfolding: (\ (w :: MinHS.TypeChecker.Gamma)
                   (ww :: MinHS.Syntax.Id)
                   (ww1 :: MinHS.Syntax.Type)
                   (ww2 :: [MinHS.Syntax.Id])
                   (ww3 :: MinHS.Syntax.Exp) ->
                 case (MinHS.TypeChecker.typeWellformed ww1)
                        `cast`
                      (MinHS.TypeChecker.N:TC[0] <MinHS.TypeChecker.Kind>_N) of wild {
                   Data.Either.Left l
                   -> (Data.Either.Left
                         @ MinHS.TypeChecker.TypeError
                         @ (MinHS.Syntax.Id, MinHS.Syntax.Type)
                         l)
                        `cast`
                      (Sym (MinHS.TypeChecker.N:TC[0]) <(MinHS.Syntax.Id,
                                                         MinHS.Syntax.Type)>_N)
                   Data.Either.Right r
                   -> case MinHS.TypeChecker.$fEqKind_$c==
                             MinHS.TypeChecker.Star
                             r of wild1 {
                        GHC.Types.False
                        -> (Data.Either.Left
                              @ MinHS.TypeChecker.TypeError
                              @ (MinHS.Syntax.Id, MinHS.Syntax.Type)
                              (MinHS.TypeChecker.KindMismatch MinHS.TypeChecker.Star r ww1))
                             `cast`
                           (Sym (MinHS.TypeChecker.N:TC[0]) <(MinHS.Syntax.Id,
                                                              MinHS.Syntax.Type)>_N)
                        GHC.Types.True
                        -> case (MinHS.TypeChecker.$wcheckAbs w ww ww1 ww2 ww3)
                                  `cast`
                                (MinHS.TypeChecker.N:TC[0] <()>_N) of wild2 {
                             Data.Either.Left l
                             -> (Data.Either.Left
                                   @ MinHS.TypeChecker.TypeError
                                   @ (MinHS.Syntax.Id, MinHS.Syntax.Type)
                                   l)
                                  `cast`
                                (Sym (MinHS.TypeChecker.N:TC[0]) <(MinHS.Syntax.Id,
                                                                   MinHS.Syntax.Type)>_N)
                             Data.Either.Right r1
                             -> (Data.Either.Right
                                   @ MinHS.TypeChecker.TypeError
                                   @ (MinHS.Syntax.Id, MinHS.Syntax.Type)
                                   (ww, ww1))
                                  `cast`
                                (Sym (MinHS.TypeChecker.N:TC[0]) <(MinHS.Syntax.Id,
                                                                   MinHS.Syntax.Type)>_N) } } }) -}
8b2a2f34e86d32ce4887029b6b7509b3
  type Gamma = MinHS.Env.Env MinHS.Syntax.Type
0cdcf92b7ecbe124b4cae11e10f6dabb
  data Kind
    = Star | (:=>) MinHS.TypeChecker.Kind MinHS.TypeChecker.Kind
9f9e038ae394bb618ece511c132c879f
  newtype TC a
    = TC (Data.Either.Either MinHS.TypeChecker.TypeError a)
68f75ef7d40c61f64651a42a2be74897
  data TypeError
    = TypeMismatch MinHS.Syntax.Type MinHS.Syntax.Type MinHS.Syntax.Exp
    | TypeShouldBeFunction MinHS.Syntax.Type MinHS.Syntax.Bind
    | FunctionTypeExpected MinHS.Syntax.Exp MinHS.Syntax.Type
    | NoSuchVariable MinHS.Syntax.Id
    | NoSuchConstructor MinHS.Syntax.Id
    | TypeConstructorSaturated MinHS.Syntax.Type MinHS.TypeChecker.Kind
    | KindMismatch MinHS.TypeChecker.Kind
                   MinHS.TypeChecker.Kind
                   MinHS.Syntax.Type
10ee58142f0c0d3a17f720cc9276fa4b
  checkAbs ::
    MinHS.TypeChecker.Gamma
    -> MinHS.Syntax.Bind -> MinHS.TypeChecker.TC ()
  {- Arity: 2, Strictness: <L,U><S(LSSL),1*U(U,1*U,1*U,U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MinHS.TypeChecker.Gamma) (w1 :: MinHS.Syntax.Bind) ->
                 case w1 of ww { MinHS.Syntax.Bind ww1 ww2 ww3 ww4 ->
                 MinHS.TypeChecker.$wcheckAbs w ww1 ww2 ww3 ww4 }) -}
7f5be7b5cc5984a6f73827d3e569de13
  checkBind ::
    MinHS.TypeChecker.Gamma
    -> MinHS.Syntax.Bind
    -> MinHS.TypeChecker.TC (MinHS.Syntax.Id, MinHS.Syntax.Type)
  {- Arity: 2, Strictness: <L,U><S(LSLL),1*U(U,U,1*U,U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MinHS.TypeChecker.Gamma) (w1 :: MinHS.Syntax.Bind) ->
                 case w1 of ww { MinHS.Syntax.Bind ww1 ww2 ww3 ww4 ->
                 MinHS.TypeChecker.$wcheckBind w ww1 ww2 ww3 ww4 }) -}
3b0b9c4ac715db0a3463983a5881a394
  checkBinds ::
    MinHS.TypeChecker.Gamma
    -> MinHS.Syntax.Program
    -> MinHS.TypeChecker.TC MinHS.TypeChecker.Gamma
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
9583943a5d5410f34879f486b33de1bb
  checkBinds' ::
    MinHS.TypeChecker.Gamma
    -> MinHS.Syntax.Program -> MinHS.TypeChecker.TC ()
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
2dd715049fb8b058c95e15682c47fa57
  checkExp ::
    MinHS.TypeChecker.Gamma
    -> MinHS.Syntax.Exp -> MinHS.TypeChecker.TC MinHS.Syntax.Type
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
5f06e22d38837e376fe48b61f9a0be1a
  constructorType ::
    MinHS.Syntax.Id -> GHC.Maybe.Maybe MinHS.Syntax.Type
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (ds :: [GHC.Types.Char]) ->
                 case GHC.Base.eqString
                        ds
                        MinHS.TypeChecker.constructorType16 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString
                             ds
                             MinHS.TypeChecker.constructorType14 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString
                                  ds
                                  MinHS.TypeChecker.constructorType12 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString
                                       ds
                                       MinHS.TypeChecker.constructorType10 of wild3 {
                                  GHC.Types.False -> GHC.Maybe.Nothing @ MinHS.Syntax.Type
                                  GHC.Types.True -> MinHS.TypeChecker.constructorType8 }
                             GHC.Types.True -> MinHS.TypeChecker.constructorType7 }
                        GHC.Types.True -> MinHS.TypeChecker.constructorType8 }
                   GHC.Types.True -> MinHS.TypeChecker.constructorType1 }) -}
dcf009c6a8207c5ae6ba10b01ce4bf4b
  constructorType1 :: GHC.Maybe.Maybe MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ MinHS.Syntax.Type
                   MinHS.TypeChecker.constructorType2) -}
78d8c4ff5a7d8714e8ae4bac0570d8fe
  constructorType10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.TypeChecker.constructorType11) -}
3d3d47d1adadfcc411836d919cdc26c5
  constructorType11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("True"#) -}
498c2bcb7335a7cfc26531640a1c1e13
  constructorType12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.TypeChecker.constructorType13) -}
15d1bcdea14f213f0e639828125c897c
  constructorType13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Nil"#) -}
259660eab40c0dc297904a73fee29502
  constructorType14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.TypeChecker.constructorType15) -}
9e84c7a8e62dcf184931978484abfead
  constructorType15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("False"#) -}
59d6c0fcf37150c4963bfae6e32affc0
  constructorType16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.TypeChecker.constructorType17) -}
beb45e623ff0823ad2ef568b4219c08d
  constructorType17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Cons"#) -}
cb7dbd69ce49297c76c972c795d34c1b
  constructorType2 :: MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (MinHS.Syntax.Arrow
                   MinHS.TypeChecker.constructorType5
                   MinHS.TypeChecker.constructorType3) -}
68814ff90effde7590ad758fe8613ad7
  constructorType3 :: MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (MinHS.Syntax.Arrow
                   MinHS.TypeChecker.constructorType4
                   MinHS.TypeChecker.constructorType4) -}
96a3b11b3c726f89e0eb9afb87e03fcd
  constructorType4 :: MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (MinHS.Syntax.TypeApp
                   MinHS.TypeChecker.constructorType6
                   MinHS.TypeChecker.constructorType5) -}
f6c231e30ea8527d0a896c1d4755196c
  constructorType5 :: MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (MinHS.Syntax.TypeCon MinHS.Syntax.Int) -}
2ba3120a1e8ae0af5d779091f6ed7278
  constructorType6 :: MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (MinHS.Syntax.TypeCon MinHS.Syntax.List) -}
876073bee9ad11a835afb3d8a3e54f3c
  constructorType7 :: GHC.Maybe.Maybe MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ MinHS.Syntax.Type
                   MinHS.TypeChecker.constructorType4) -}
739d77188d1252402a19c467332df2a4
  constructorType8 :: GHC.Maybe.Maybe MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ MinHS.Syntax.Type
                   MinHS.TypeChecker.constructorType9) -}
19d53024da08924319f8d6b8aec2534b
  constructorType9 :: MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (MinHS.Syntax.TypeCon MinHS.Syntax.Bool) -}
23f532c051a248d85937c79b04b8d6d0
  initialGamma :: MinHS.TypeChecker.Gamma
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                (Data.Map.Internal.Tip @ GHC.Base.String @ MinHS.Syntax.Type)
                  `cast`
                (Sym (MinHS.Env.N:Env[0]) <MinHS.Syntax.Type>_N) -}
03a7bdfbf2c8f080ab473961686dda00
  ofKind ::
    MinHS.Syntax.Type
    -> MinHS.TypeChecker.Kind -> MinHS.TypeChecker.TC ()
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                MinHS.TypeChecker.ofKind1
                  `cast`
                (<MinHS.Syntax.Type>_R
                 ->_R <MinHS.TypeChecker.Kind>_R
                 ->_R Sym (MinHS.TypeChecker.N:TC[0]) <()>_N) -}
35103f07edd689018546bcb655220605
  ofKind1 ::
    MinHS.Syntax.Type
    -> MinHS.TypeChecker.Kind
    -> Data.Either.Either MinHS.TypeChecker.TypeError ()
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U>,
     Unfolding: (\ (t :: MinHS.Syntax.Type)
                   (k :: MinHS.TypeChecker.Kind) ->
                 case (MinHS.TypeChecker.typeWellformed t)
                        `cast`
                      (MinHS.TypeChecker.N:TC[0] <MinHS.TypeChecker.Kind>_N) of wild {
                   Data.Either.Left l
                   -> Data.Either.Left @ MinHS.TypeChecker.TypeError @ () l
                   Data.Either.Right r
                   -> case MinHS.TypeChecker.$fEqKind_$c== k r of wild1 {
                        GHC.Types.False
                        -> Data.Either.Left
                             @ MinHS.TypeChecker.TypeError
                             @ ()
                             (MinHS.TypeChecker.KindMismatch k r t)
                        GHC.Types.True -> MinHS.TypeChecker.ofKind2 } }) -}
22a36bf6f2eb2566949d01a190a898c9
  ofKind2 :: Data.Either.Either MinHS.TypeChecker.TypeError ()
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ MinHS.TypeChecker.TypeError
                   @ ()
                   GHC.Tuple.()) -}
86775987d04b92845428bee8cd47b911
  primOpType :: MinHS.Syntax.Op -> MinHS.Syntax.Type
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m1, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MinHS.Syntax.Op) ->
                 case w of wild {
                   DEFAULT
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType5
                        MinHS.TypeChecker.primOpType2
                   MinHS.Syntax.Neg
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType5
                        MinHS.TypeChecker.constructorType5
                   MinHS.Syntax.Gt
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType5
                        MinHS.TypeChecker.primOpType1
                   MinHS.Syntax.Ge
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType5
                        MinHS.TypeChecker.primOpType1
                   MinHS.Syntax.Lt
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType5
                        MinHS.TypeChecker.primOpType1
                   MinHS.Syntax.Le
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType5
                        MinHS.TypeChecker.primOpType1
                   MinHS.Syntax.Eq
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType5
                        MinHS.TypeChecker.primOpType1
                   MinHS.Syntax.Ne
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType5
                        MinHS.TypeChecker.primOpType1
                   MinHS.Syntax.Head
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType4
                        MinHS.TypeChecker.constructorType5
                   MinHS.Syntax.Tail
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType4
                        MinHS.TypeChecker.constructorType4
                   MinHS.Syntax.Null
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType4
                        MinHS.TypeChecker.constructorType9 }) -}
b9fedbe4af2e2c225eb49992ff6a125f
  primOpType1 :: MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (MinHS.Syntax.Arrow
                   MinHS.TypeChecker.constructorType5
                   MinHS.TypeChecker.constructorType9) -}
e4283230f627ea61c2acc8dcc6500f4e
  primOpType2 :: MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (MinHS.Syntax.Arrow
                   MinHS.TypeChecker.constructorType5
                   MinHS.TypeChecker.constructorType5) -}
b8959bc486ef94682d7aeb68301dfbde
  runTC ::
    MinHS.TypeChecker.TC ()
    -> GHC.Maybe.Maybe MinHS.TypeChecker.TypeError
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MinHS.TypeChecker.TC ()) ->
                 case ds `cast` (MinHS.TypeChecker.N:TC[0] <()>_N) of wild {
                   Data.Either.Left err
                   -> GHC.Maybe.Just @ MinHS.TypeChecker.TypeError err
                   Data.Either.Right ds1
                   -> case ds1 of wild1 { () ->
                      GHC.Maybe.Nothing @ MinHS.TypeChecker.TypeError } }) -}
b7e2458bf38d56df147d8c030f8b3276
  shouldCheck ::
    MinHS.TypeChecker.Gamma
    -> MinHS.Syntax.Exp -> MinHS.Syntax.Type -> MinHS.TypeChecker.TC ()
  {- Arity: 3, Strictness: <L,U><S,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                MinHS.TypeChecker.shouldCheck1
                  `cast`
                (<MinHS.TypeChecker.Gamma>_R
                 ->_R <MinHS.Syntax.Exp>_R
                 ->_R <MinHS.Syntax.Type>_R
                 ->_R Sym (MinHS.TypeChecker.N:TC[0]) <()>_N) -}
ef7a6d33cf2346293f2052f791cb4f01
  shouldCheck1 ::
    MinHS.TypeChecker.Gamma
    -> MinHS.Syntax.Exp
    -> MinHS.Syntax.Type
    -> Data.Either.Either MinHS.TypeChecker.TypeError ()
  {- Arity: 3, Strictness: <L,U><S,U><L,U>,
     Unfolding: (\ (g :: MinHS.TypeChecker.Gamma)
                   (exp :: MinHS.Syntax.Exp)
                   (t :: MinHS.Syntax.Type) ->
                 case (MinHS.TypeChecker.checkExp g exp)
                        `cast`
                      (MinHS.TypeChecker.N:TC[0] <MinHS.Syntax.Type>_N) of wild {
                   Data.Either.Left l
                   -> Data.Either.Left @ MinHS.TypeChecker.TypeError @ () l
                   Data.Either.Right r
                   -> case MinHS.Syntax.$fEqBind_$c==2 r t of wild1 {
                        GHC.Types.False
                        -> Data.Either.Left
                             @ MinHS.TypeChecker.TypeError
                             @ ()
                             (MinHS.TypeChecker.TypeMismatch t r exp)
                        GHC.Types.True -> MinHS.TypeChecker.ofKind2 } }) -}
06be75250fc30b585b0ab1dac70af55f
  tyConKind :: MinHS.Syntax.TyCon -> MinHS.TypeChecker.Kind
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MinHS.Syntax.TyCon) ->
                 case ds of wild {
                   DEFAULT -> MinHS.TypeChecker.Star
                   MinHS.Syntax.List -> MinHS.TypeChecker.tyConKind1 }) -}
df2b027507acb3d799ef4495c41f293c
  tyConKind1 :: MinHS.TypeChecker.Kind
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (MinHS.TypeChecker.:=>
                   MinHS.TypeChecker.Star
                   MinHS.TypeChecker.Star) -}
dc609129b10d8894630c8dc2f5cb0979
  typeError :: MinHS.TypeChecker.TypeError -> MinHS.TypeChecker.TC a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m1,
     Unfolding: InlineRule (0, True, True)
                (Data.Either.Left @ MinHS.TypeChecker.TypeError)
                  `cast`
                (forall (a :: <*>_N).
                 <MinHS.TypeChecker.TypeError>_R
                 ->_R Sym (MinHS.TypeChecker.N:TC[0]) <a>_N) -}
5f7f3cfa1531dd9920f0e06d4ae2d6f8
  typeWellformed ::
    MinHS.Syntax.Type -> MinHS.TypeChecker.TC MinHS.TypeChecker.Kind
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
c0668f27a4a88951a06d53342f447c35
  typecheck ::
    MinHS.Syntax.Program -> GHC.Maybe.Maybe MinHS.TypeChecker.TypeError
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MinHS.Syntax.Program) ->
                 case (MinHS.TypeChecker.checkBinds
                         (Data.Map.Internal.Tip @ GHC.Base.String @ MinHS.Syntax.Type)
                           `cast`
                         (Sym (MinHS.Env.N:Env[0]) <MinHS.Syntax.Type>_N)
                         x)
                        `cast`
                      (MinHS.TypeChecker.N:TC[0] <MinHS.TypeChecker.Gamma>_N) of wild {
                   Data.Either.Left x1
                   -> GHC.Maybe.Just @ MinHS.TypeChecker.TypeError x1
                   Data.Either.Right y
                   -> GHC.Maybe.Nothing @ MinHS.TypeChecker.TypeError }) -}
instance GHC.Base.Applicative [MinHS.TypeChecker.TC]
  = MinHS.TypeChecker.$fApplicativeTC
instance GHC.Classes.Eq [MinHS.TypeChecker.Kind]
  = MinHS.TypeChecker.$fEqKind
instance GHC.Base.Functor [MinHS.TypeChecker.TC]
  = MinHS.TypeChecker.$fFunctorTC
instance Control.Monad.Fail.MonadFail [MinHS.TypeChecker.TC]
  = MinHS.TypeChecker.$fMonadFailTC
instance GHC.Base.Monad [MinHS.TypeChecker.TC]
  = MinHS.TypeChecker.$fMonadTC
instance GHC.Show.Show [MinHS.TypeChecker.Kind]
  = MinHS.TypeChecker.$fShowKind
instance GHC.Show.Show [MinHS.TypeChecker.TypeError]
  = MinHS.TypeChecker.$fShowTypeError
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

