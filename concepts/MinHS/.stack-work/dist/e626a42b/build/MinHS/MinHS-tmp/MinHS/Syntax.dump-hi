
==================== FINAL INTERFACE ====================
2019-12-08 00:34:30.1754767 UTC

interface main:MinHS.Syntax 8065
  interface hash: 7e6f20636cb668703aedb279f79b0a09
  ABI hash: a27359a8aa4022e86f719300174c8c96
  export-list hash: d6deca1fbcb8bfd1f4cff4f1793e2d74
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0389d9b0cf9d29ba8d9c35ce4102d769
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  MinHS.Syntax.binApply
  MinHS.Syntax.binTyApp
  MinHS.Syntax.Bind{MinHS.Syntax.Bind}
  MinHS.Syntax.Exp{MinHS.Syntax.App MinHS.Syntax.Con MinHS.Syntax.If MinHS.Syntax.Let MinHS.Syntax.Letrec MinHS.Syntax.Num MinHS.Syntax.Prim MinHS.Syntax.Recfun MinHS.Syntax.Var}
  MinHS.Syntax.Id
  MinHS.Syntax.Op{MinHS.Syntax.Add MinHS.Syntax.Eq MinHS.Syntax.Ge MinHS.Syntax.Gt MinHS.Syntax.Head MinHS.Syntax.Le MinHS.Syntax.Lt MinHS.Syntax.Mul MinHS.Syntax.Ne MinHS.Syntax.Neg MinHS.Syntax.Null MinHS.Syntax.Quot MinHS.Syntax.Rem MinHS.Syntax.Sub MinHS.Syntax.Tail}
  MinHS.Syntax.Program
  MinHS.Syntax.TyCon{MinHS.Syntax.Bool MinHS.Syntax.Int MinHS.Syntax.List MinHS.Syntax.Unit}
  MinHS.Syntax.Type{MinHS.Syntax.Arrow MinHS.Syntax.TypeApp MinHS.Syntax.TypeCon}
module dependencies:
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Data.List 6c60559263db7cf0f22549b9673785b9
import  -/  base-4.12.0.0:GHC.Base fbe365a916ebeeeb4bc1f895dbe83e42
import  -/  base-4.12.0.0:GHC.Read b528d97e197d5f83d73bcceb2865bd8b
import  -/  base-4.12.0.0:GHC.Show fa6032f3f820e8e8ec87b97bdca4e160
import  -/  base-4.12.0.0:Prelude 80c668cb99fbafebd524c5e897f8c982
import  -/  base-4.12.0.0:Text.ParserCombinators.ReadPrec 4dc78dc1e8bf5fc238a501050f51b2e3
import  -/  base-4.12.0.0:Text.Read.Lex ee49706b9e94194f0a3ecc84e5c28cc6
import  -/  ghc-prim-0.5.3:GHC.Classes 6002495dc43e58d28c87e5e5e058752a
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 991701cf58f9f55c8a39f2041a88edd4
5cd0e4dc4577078c5458ab29323fc9fb
  $fEqBind :: GHC.Classes.Eq MinHS.Syntax.Bind
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.Syntax.Bind
                  MinHS.Syntax.$fEqBind_$c==
                  MinHS.Syntax.$fEqBind_$c/= -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fEqBind_$c/= ::
    MinHS.Syntax.Bind -> MinHS.Syntax.Bind -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MinHS.Syntax.Bind) (y :: MinHS.Syntax.Bind) ->
                 case MinHS.Syntax.$fEqBind_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fEqBind_$c== ::
    MinHS.Syntax.Bind -> MinHS.Syntax.Bind -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MinHS.Syntax.Bind) (w1 :: MinHS.Syntax.Bind) ->
                 case w of ww { MinHS.Syntax.Bind ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { MinHS.Syntax.Bind ww6 ww7 ww8 ww9 ->
                 MinHS.Syntax.$w$c== ww1 ww2 ww3 ww4 ww6 ww7 ww8 ww9 } }) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fEqBind_$c==1 ::
    MinHS.Syntax.Exp -> MinHS.Syntax.Exp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
0f0d82d3a4780c30c0769155ebac6d59
  $fEqBind_$c==2 ::
    MinHS.Syntax.Type -> MinHS.Syntax.Type -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fEqExp :: GHC.Classes.Eq MinHS.Syntax.Exp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.Syntax.Exp
                  MinHS.Syntax.$fEqBind_$c==1
                  MinHS.Syntax.$fEqExp_$c/= -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fEqExp_$c/= ::
    MinHS.Syntax.Exp -> MinHS.Syntax.Exp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MinHS.Syntax.Exp) (y :: MinHS.Syntax.Exp) ->
                 case MinHS.Syntax.$fEqBind_$c==1 x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fEqOp :: GHC.Classes.Eq MinHS.Syntax.Op
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.Syntax.Op
                  MinHS.Syntax.$fEqOp_$c==
                  MinHS.Syntax.$fEqOp_$c/= -}
775e4e05cc11aefa57ad9c1dd3358091
  $fEqOp_$c/= :: MinHS.Syntax.Op -> MinHS.Syntax.Op -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MinHS.Syntax.Op) (y :: MinHS.Syntax.Op) ->
                 case GHC.Prim.dataToTag# @ MinHS.Syntax.Op x of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ MinHS.Syntax.Op y of b# { DEFAULT ->
                 case GHC.Prim.==# a# b# of lwild {
                   DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } } }) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fEqOp_$c== :: MinHS.Syntax.Op -> MinHS.Syntax.Op -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MinHS.Syntax.Op) (b :: MinHS.Syntax.Op) ->
                 case GHC.Prim.dataToTag# @ MinHS.Syntax.Op a of a# { DEFAULT ->
                 case GHC.Prim.dataToTag# @ MinHS.Syntax.Op b of b# { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# a# b#) } }) -}
1fed023b922d36f77991acd4b11d2098
  $fEqTyCon :: GHC.Classes.Eq MinHS.Syntax.TyCon
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.Syntax.TyCon
                  MinHS.Syntax.$fEqTyCon_$c==
                  MinHS.Syntax.$fEqTyCon_$c/= -}
1fed023b922d36f77991acd4b11d2098
  $fEqTyCon_$c/= ::
    MinHS.Syntax.TyCon -> MinHS.Syntax.TyCon -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MinHS.Syntax.TyCon) (y :: MinHS.Syntax.TyCon) ->
                 case x of wild {
                   MinHS.Syntax.Unit
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True MinHS.Syntax.Unit -> GHC.Types.False }
                   MinHS.Syntax.Bool
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True MinHS.Syntax.Bool -> GHC.Types.False }
                   MinHS.Syntax.Int
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True MinHS.Syntax.Int -> GHC.Types.False }
                   MinHS.Syntax.List
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        MinHS.Syntax.List -> GHC.Types.False } }) -}
1fed023b922d36f77991acd4b11d2098
  $fEqTyCon_$c== ::
    MinHS.Syntax.TyCon -> MinHS.Syntax.TyCon -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: MinHS.Syntax.TyCon)
                   (ds1 :: MinHS.Syntax.TyCon) ->
                 case ds of wild {
                   MinHS.Syntax.Unit
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False MinHS.Syntax.Unit -> GHC.Types.True }
                   MinHS.Syntax.Bool
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False MinHS.Syntax.Bool -> GHC.Types.True }
                   MinHS.Syntax.Int
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False MinHS.Syntax.Int -> GHC.Types.True }
                   MinHS.Syntax.List
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        MinHS.Syntax.List -> GHC.Types.True } }) -}
0f0d82d3a4780c30c0769155ebac6d59
  $fEqType :: GHC.Classes.Eq MinHS.Syntax.Type
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.Syntax.Type
                  MinHS.Syntax.$fEqBind_$c==2
                  MinHS.Syntax.$fEqType_$c/= -}
0f0d82d3a4780c30c0769155ebac6d59
  $fEqType_$c/= ::
    MinHS.Syntax.Type -> MinHS.Syntax.Type -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MinHS.Syntax.Type) (y :: MinHS.Syntax.Type) ->
                 case MinHS.Syntax.$fEqBind_$c==2 x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1fed023b922d36f77991acd4b11d2098
  $fOrdTyCon :: GHC.Classes.Ord MinHS.Syntax.TyCon
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.Syntax.TyCon
                  MinHS.Syntax.$fEqTyCon
                  MinHS.Syntax.$fOrdTyCon_$ccompare
                  MinHS.Syntax.$fOrdTyCon_$c<
                  MinHS.Syntax.$fOrdTyCon_$c<=
                  MinHS.Syntax.$fOrdTyCon_$c>
                  MinHS.Syntax.$fOrdTyCon_$c>=
                  MinHS.Syntax.$fOrdTyCon_$cmax
                  MinHS.Syntax.$fOrdTyCon_$cmin -}
1fed023b922d36f77991acd4b11d2098
  $fOrdTyCon_$c< ::
    MinHS.Syntax.TyCon -> MinHS.Syntax.TyCon -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: MinHS.Syntax.TyCon)
                   (b :: MinHS.Syntax.TyCon) ->
                 case a of wild {
                   MinHS.Syntax.Unit
                   -> case b of wild1 {
                        MinHS.Syntax.Unit -> GHC.Types.False
                        MinHS.Syntax.Bool -> GHC.Types.True
                        MinHS.Syntax.Int -> GHC.Types.True
                        MinHS.Syntax.List -> GHC.Types.True }
                   MinHS.Syntax.Bool
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        MinHS.Syntax.Int -> GHC.Types.True
                        MinHS.Syntax.List -> GHC.Types.True }
                   MinHS.Syntax.Int
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False MinHS.Syntax.List -> GHC.Types.True }
                   MinHS.Syntax.List
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
1fed023b922d36f77991acd4b11d2098
  $fOrdTyCon_$c<= ::
    MinHS.Syntax.TyCon -> MinHS.Syntax.TyCon -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: MinHS.Syntax.TyCon)
                   (b :: MinHS.Syntax.TyCon) ->
                 case b of wild {
                   MinHS.Syntax.Unit
                   -> case a of wild1 {
                        MinHS.Syntax.Unit -> GHC.Types.True
                        MinHS.Syntax.Bool -> GHC.Types.False
                        MinHS.Syntax.Int -> GHC.Types.False
                        MinHS.Syntax.List -> GHC.Types.False }
                   MinHS.Syntax.Bool
                   -> case a of wild1 {
                        DEFAULT -> GHC.Types.True
                        MinHS.Syntax.Int -> GHC.Types.False
                        MinHS.Syntax.List -> GHC.Types.False }
                   MinHS.Syntax.Int
                   -> case a of wild1 {
                        DEFAULT -> GHC.Types.True MinHS.Syntax.List -> GHC.Types.False }
                   MinHS.Syntax.List
                   -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
1fed023b922d36f77991acd4b11d2098
  $fOrdTyCon_$c> ::
    MinHS.Syntax.TyCon -> MinHS.Syntax.TyCon -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: MinHS.Syntax.TyCon) (b :: MinHS.Syntax.TyCon) ->
                 MinHS.Syntax.$fOrdTyCon_$c< b a) -}
1fed023b922d36f77991acd4b11d2098
  $fOrdTyCon_$c>= ::
    MinHS.Syntax.TyCon -> MinHS.Syntax.TyCon -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: MinHS.Syntax.TyCon)
                   (b :: MinHS.Syntax.TyCon) ->
                 case a of wild {
                   MinHS.Syntax.Unit
                   -> case b of wild1 {
                        MinHS.Syntax.Unit -> GHC.Types.True
                        MinHS.Syntax.Bool -> GHC.Types.False
                        MinHS.Syntax.Int -> GHC.Types.False
                        MinHS.Syntax.List -> GHC.Types.False }
                   MinHS.Syntax.Bool
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        MinHS.Syntax.Int -> GHC.Types.False
                        MinHS.Syntax.List -> GHC.Types.False }
                   MinHS.Syntax.Int
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True MinHS.Syntax.List -> GHC.Types.False }
                   MinHS.Syntax.List
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
1fed023b922d36f77991acd4b11d2098
  $fOrdTyCon_$ccompare ::
    MinHS.Syntax.TyCon -> MinHS.Syntax.TyCon -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: MinHS.Syntax.TyCon)
                   (b :: MinHS.Syntax.TyCon) ->
                 case a of wild {
                   MinHS.Syntax.Unit
                   -> case b of wild1 {
                        MinHS.Syntax.Unit -> GHC.Types.EQ
                        MinHS.Syntax.Bool -> GHC.Types.LT
                        MinHS.Syntax.Int -> GHC.Types.LT
                        MinHS.Syntax.List -> GHC.Types.LT }
                   MinHS.Syntax.Bool
                   -> case b of wild1 {
                        MinHS.Syntax.Unit -> GHC.Types.GT
                        MinHS.Syntax.Bool -> GHC.Types.EQ
                        MinHS.Syntax.Int -> GHC.Types.LT
                        MinHS.Syntax.List -> GHC.Types.LT }
                   MinHS.Syntax.Int
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        MinHS.Syntax.Int -> GHC.Types.EQ
                        MinHS.Syntax.List -> GHC.Types.LT }
                   MinHS.Syntax.List
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT MinHS.Syntax.List -> GHC.Types.EQ } }) -}
1fed023b922d36f77991acd4b11d2098
  $fOrdTyCon_$cmax ::
    MinHS.Syntax.TyCon -> MinHS.Syntax.TyCon -> MinHS.Syntax.TyCon
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: MinHS.Syntax.TyCon)
                   (y :: MinHS.Syntax.TyCon) ->
                 case y of wild {
                   MinHS.Syntax.Unit -> x
                   MinHS.Syntax.Bool
                   -> case x of wild1 {
                        DEFAULT -> MinHS.Syntax.Bool
                        MinHS.Syntax.Int -> MinHS.Syntax.Int
                        MinHS.Syntax.List -> MinHS.Syntax.List }
                   MinHS.Syntax.Int
                   -> case x of wild1 {
                        DEFAULT -> MinHS.Syntax.Int
                        MinHS.Syntax.List -> MinHS.Syntax.List }
                   MinHS.Syntax.List
                   -> case x of wild1 { DEFAULT -> MinHS.Syntax.List } }) -}
1fed023b922d36f77991acd4b11d2098
  $fOrdTyCon_$cmin ::
    MinHS.Syntax.TyCon -> MinHS.Syntax.TyCon -> MinHS.Syntax.TyCon
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: MinHS.Syntax.TyCon)
                   (y :: MinHS.Syntax.TyCon) ->
                 case y of wild {
                   MinHS.Syntax.Unit
                   -> case x of wild1 { DEFAULT -> MinHS.Syntax.Unit }
                   MinHS.Syntax.Bool
                   -> case x of wild1 {
                        DEFAULT -> wild1
                        MinHS.Syntax.Int -> MinHS.Syntax.Bool
                        MinHS.Syntax.List -> MinHS.Syntax.Bool }
                   MinHS.Syntax.Int
                   -> case x of wild1 {
                        DEFAULT -> wild1 MinHS.Syntax.List -> MinHS.Syntax.Int }
                   MinHS.Syntax.List -> x }) -}
0f0d82d3a4780c30c0769155ebac6d59
  $fOrdType :: GHC.Classes.Ord MinHS.Syntax.Type
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.Syntax.Type
                  MinHS.Syntax.$fEqType
                  MinHS.Syntax.$fOrdType_$ccompare
                  MinHS.Syntax.$fOrdType_$c<
                  MinHS.Syntax.$fOrdType_$c<=
                  MinHS.Syntax.$fOrdType_$c>
                  MinHS.Syntax.$fOrdType_$c>=
                  MinHS.Syntax.$fOrdType_$cmax
                  MinHS.Syntax.$fOrdType_$cmin -}
0f0d82d3a4780c30c0769155ebac6d59
  $fOrdType_$c< ::
    MinHS.Syntax.Type -> MinHS.Syntax.Type -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
0f0d82d3a4780c30c0769155ebac6d59
  $fOrdType_$c<= ::
    MinHS.Syntax.Type -> MinHS.Syntax.Type -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MinHS.Syntax.Type) (b :: MinHS.Syntax.Type) ->
                 case MinHS.Syntax.$fOrdType_$c< b a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0f0d82d3a4780c30c0769155ebac6d59
  $fOrdType_$c> ::
    MinHS.Syntax.Type -> MinHS.Syntax.Type -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: MinHS.Syntax.Type) (b :: MinHS.Syntax.Type) ->
                 MinHS.Syntax.$fOrdType_$c< b a) -}
0f0d82d3a4780c30c0769155ebac6d59
  $fOrdType_$c>= ::
    MinHS.Syntax.Type -> MinHS.Syntax.Type -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MinHS.Syntax.Type) (b :: MinHS.Syntax.Type) ->
                 case MinHS.Syntax.$fOrdType_$c< a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0f0d82d3a4780c30c0769155ebac6d59
  $fOrdType_$ccompare ::
    MinHS.Syntax.Type -> MinHS.Syntax.Type -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
0f0d82d3a4780c30c0769155ebac6d59
  $fOrdType_$cmax ::
    MinHS.Syntax.Type -> MinHS.Syntax.Type -> MinHS.Syntax.Type
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MinHS.Syntax.Type) (y :: MinHS.Syntax.Type) ->
                 case MinHS.Syntax.$fOrdType_$c< y x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
0f0d82d3a4780c30c0769155ebac6d59
  $fOrdType_$cmin ::
    MinHS.Syntax.Type -> MinHS.Syntax.Type -> MinHS.Syntax.Type
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: MinHS.Syntax.Type) (y :: MinHS.Syntax.Type) ->
                 case MinHS.Syntax.$fOrdType_$c< y x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fReadBind :: GHC.Read.Read MinHS.Syntax.Bind
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.Syntax.Bind
                  MinHS.Syntax.$fReadBind_$creadsPrec
                  MinHS.Syntax.$fReadBind_$creadList
                  MinHS.Syntax.$fReadBind1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Bind>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                     <MinHS.Syntax.Bind>_R))
                  MinHS.Syntax.$fReadBind_$creadListPrec -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fReadBind1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Bind -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ MinHS.Syntax.Bind
                   MinHS.Syntax.$fReadBind2
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MinHS.Syntax.Bind>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <MinHS.Syntax.Bind>_R))) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fReadBind2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Bind -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: MinHS.Syntax.Bind -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MinHS.Syntax.$w$creadPrec ww1 @ b w1 }) -}
18664b5096260ab424ea715870001845
  $fReadBind3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadBind4) -}
a4f86d0544c936461ebc24160f679759
  $fReadBind4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bind"#) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fReadBind5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Exp -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: MinHS.Syntax.Exp -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MinHS.Syntax.$w$creadPrec1 ww1 @ b w1 }) -}
0f0d82d3a4780c30c0769155ebac6d59
  $fReadBind6 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Type -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: MinHS.Syntax.Type -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MinHS.Syntax.$w$creadPrec2 ww1 @ b w1 }) -}
2d1cfe1aa637ca512e7543e346378e08
  $fReadBind7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fReadBind8 :: Text.ParserCombinators.ReadP.P [MinHS.Syntax.Bind]
  {- Unfolding: ((MinHS.Syntax.$fReadBind_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[MinHS.Syntax.Bind]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <[MinHS.Syntax.Bind]>_R)
                   @ [MinHS.Syntax.Bind]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [MinHS.Syntax.Bind])) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fReadBind_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [MinHS.Syntax.Bind]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [MinHS.Syntax.Bind]
                   MinHS.Syntax.$fReadBind8) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fReadBind_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [MinHS.Syntax.Bind]
  {- Unfolding: (GHC.Read.list
                   @ MinHS.Syntax.Bind
                   MinHS.Syntax.$fReadBind1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MinHS.Syntax.Bind>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <MinHS.Syntax.Bind>_R))) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fReadBind_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS MinHS.Syntax.Bind
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ MinHS.Syntax.Bind
                   (GHC.Read.$fRead()6
                      @ MinHS.Syntax.Bind
                      MinHS.Syntax.$fReadBind2
                        `cast`
                      ((<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <MinHS.Syntax.Bind>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <MinHS.Syntax.Bind>_R))
                      n
                      @ MinHS.Syntax.Bind
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ MinHS.Syntax.Bind))) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fReadExp :: GHC.Read.Read MinHS.Syntax.Exp
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.Syntax.Exp
                  MinHS.Syntax.$fReadExp_$creadsPrec
                  MinHS.Syntax.$fReadExp_$creadList
                  MinHS.Syntax.$fReadExp1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Exp>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                    <MinHS.Syntax.Exp>_R))
                  MinHS.Syntax.$fReadExp_$creadListPrec -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fReadExp1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Exp -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ MinHS.Syntax.Exp
                   MinHS.Syntax.$fReadBind5
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MinHS.Syntax.Exp>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                     <MinHS.Syntax.Exp>_R))) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fReadExp2 :: Text.ParserCombinators.ReadP.P [MinHS.Syntax.Exp]
  {- Unfolding: ((MinHS.Syntax.$fReadExp_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[MinHS.Syntax.Exp]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <[MinHS.Syntax.Exp]>_R)
                   @ [MinHS.Syntax.Exp]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [MinHS.Syntax.Exp])) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fReadExp_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [MinHS.Syntax.Exp]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [MinHS.Syntax.Exp]
                   MinHS.Syntax.$fReadExp2) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fReadExp_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [MinHS.Syntax.Exp]
  {- Unfolding: (GHC.Read.list
                   @ MinHS.Syntax.Exp
                   MinHS.Syntax.$fReadExp1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MinHS.Syntax.Exp>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                     <MinHS.Syntax.Exp>_R))) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fReadExp_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS MinHS.Syntax.Exp
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ MinHS.Syntax.Exp
                   (GHC.Read.$fRead()6
                      @ MinHS.Syntax.Exp
                      MinHS.Syntax.$fReadBind5
                        `cast`
                      ((<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <MinHS.Syntax.Exp>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        <MinHS.Syntax.Exp>_R))
                      n
                      @ MinHS.Syntax.Exp
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ MinHS.Syntax.Exp))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp :: GHC.Read.Read MinHS.Syntax.Op
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.Syntax.Op
                  MinHS.Syntax.$fReadOp_$creadsPrec
                  MinHS.Syntax.$fReadOp_$creadList
                  MinHS.Syntax.$fReadOp1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Op>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <MinHS.Syntax.Op>_R))
                  MinHS.Syntax.$fReadOp_$creadListPrec -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ MinHS.Syntax.Op
                   MinHS.Syntax.$fReadOp2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <MinHS.Syntax.Op>_R))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
                   MinHS.Syntax.$fReadOp41
                   MinHS.Syntax.$fReadOp11) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
                   MinHS.Syntax.$fReadOp37
                   MinHS.Syntax.$fReadOp12) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
                   MinHS.Syntax.$fReadOp33
                   MinHS.Syntax.$fReadOp13) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
                   MinHS.Syntax.$fReadOp29
                   MinHS.Syntax.$fReadOp14) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp14 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
                   MinHS.Syntax.$fReadOp25
                   MinHS.Syntax.$fReadOp15) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp15 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
                   MinHS.Syntax.$fReadOp21
                   MinHS.Syntax.$fReadOp16) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp16 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
                   MinHS.Syntax.$fReadOp17
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadOp19,
                  MinHS.Syntax.$fReadOp18
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Op>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <MinHS.Syntax.Op>_R)))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.Null) -}
ba9ebbc03123635cf4c090d8d7ef3fb5
  $fReadOp19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadOp20) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP MinHS.Syntax.Op
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec) ->
                 GHC.Read.choose2
                   @ MinHS.Syntax.Op
                   MinHS.Syntax.$fReadOp_sps
                   eta) -}
9cb07ee45fe775cc75488cfc85cf5dbf
  $fReadOp20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Null"#) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadOp23,
                  MinHS.Syntax.$fReadOp22
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Op>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <MinHS.Syntax.Op>_R)))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.Tail) -}
12661bb3a627ab3eee78b597876de86a
  $fReadOp23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadOp24) -}
7a75b300d40779e5a7c915d63f770fa1
  $fReadOp24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tail"#) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp25 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadOp27,
                  MinHS.Syntax.$fReadOp26
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Op>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <MinHS.Syntax.Op>_R)))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp26 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.Head) -}
666cf5aed3ac95aa6ee1d3ef3df98c0d
  $fReadOp27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadOp28) -}
f6a86ac6763477e5ba071677905c1078
  $fReadOp28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Head"#) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadOp31,
                  MinHS.Syntax.$fReadOp30
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Op>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <MinHS.Syntax.Op>_R)))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp3 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
                   MinHS.Syntax.$fReadOp69
                   MinHS.Syntax.$fReadOp4) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.Ne) -}
f850133c250ddbed08c95218e5dbb0b3
  $fReadOp31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadOp32) -}
01e0854a04986c05bbe12e438e98098a
  $fReadOp32 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ne"#) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp33 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadOp35,
                  MinHS.Syntax.$fReadOp34
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Op>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <MinHS.Syntax.Op>_R)))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp34 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.Eq) -}
f2302f9f0afd271ebc2aa4d7e594253b
  $fReadOp35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadOp36) -}
9d8fa4584e1c2b6098638d3a2861662a
  $fReadOp36 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Eq"#) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp37 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadOp39,
                  MinHS.Syntax.$fReadOp38
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Op>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <MinHS.Syntax.Op>_R)))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp38 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.Le) -}
76f6d43396f9bb687b5b255cf68098b2
  $fReadOp39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadOp40) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
                   MinHS.Syntax.$fReadOp65
                   MinHS.Syntax.$fReadOp5) -}
4326c063d74129e9189ee2c92caeaea8
  $fReadOp40 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Le"#) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadOp43,
                  MinHS.Syntax.$fReadOp42
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Op>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <MinHS.Syntax.Op>_R)))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.Lt) -}
192810a6aa5e21f3c649ee5596ab1960
  $fReadOp43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadOp44) -}
4de74ab2cf7af8d741831096569df305
  $fReadOp44 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lt"#) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp45 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadOp47,
                  MinHS.Syntax.$fReadOp46
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Op>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <MinHS.Syntax.Op>_R)))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp46 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.Ge) -}
b4f0e7928a53d3af5d4f229ae0cc77d3
  $fReadOp47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadOp48) -}
2220580b792f0ad41d1181fce560e835
  $fReadOp48 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ge"#) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp49 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadOp51,
                  MinHS.Syntax.$fReadOp50
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Op>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <MinHS.Syntax.Op>_R)))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
                   MinHS.Syntax.$fReadOp61
                   MinHS.Syntax.$fReadOp6) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp50 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.Gt) -}
f921afa067344230ec1b826701af2468
  $fReadOp51 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadOp52) -}
85e0a1ab14648e7b55f84a018f121732
  $fReadOp52 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Gt"#) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp53 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadOp55,
                  MinHS.Syntax.$fReadOp54
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Op>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <MinHS.Syntax.Op>_R)))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp54 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.Neg) -}
e6adc1e730f8a539473668e0e9dfa939
  $fReadOp55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadOp56) -}
9af4beceb24f54a84937fe5d5caea074
  $fReadOp56 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Neg"#) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp57 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadOp59,
                  MinHS.Syntax.$fReadOp58
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Op>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <MinHS.Syntax.Op>_R)))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp58 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.Rem) -}
f76080012d63a37f4ff0b01e5c6bf1ef
  $fReadOp59 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadOp60) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
                   MinHS.Syntax.$fReadOp57
                   MinHS.Syntax.$fReadOp7) -}
f51aed184c59a57c8d7b737949da8d51
  $fReadOp60 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Rem"#) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp61 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadOp63,
                  MinHS.Syntax.$fReadOp62
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Op>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <MinHS.Syntax.Op>_R)))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp62 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.Quot) -}
332920a622e99f63a0da414359b998af
  $fReadOp63 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadOp64) -}
f54aa8bfb677ddbe0d88ced1ed5b45a6
  $fReadOp64 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Quot"#) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp65 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadOp67,
                  MinHS.Syntax.$fReadOp66
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Op>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <MinHS.Syntax.Op>_R)))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp66 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.Mul) -}
148874e474138cf57ea30d9b1f475dd1
  $fReadOp67 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadOp68) -}
882bccbfb8857278688b4e8fed7cb0c7
  $fReadOp68 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Mul"#) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp69 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadOp71,
                  MinHS.Syntax.$fReadOp70
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Op>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <MinHS.Syntax.Op>_R)))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
                   MinHS.Syntax.$fReadOp53
                   MinHS.Syntax.$fReadOp8) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp70 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.Sub) -}
e48f78c10f07dd10d77ab5eb46272c6a
  $fReadOp71 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadOp72) -}
e7764ee6af3bd68160e582a2994f89e8
  $fReadOp72 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Sub"#) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp73 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadOp75,
                  MinHS.Syntax.$fReadOp74
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Op>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                   <MinHS.Syntax.Op>_R)))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp74 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.Op -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.Add) -}
1b3b066ddfa41106dff41a06ca38257a
  $fReadOp75 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadOp76) -}
3564d51adb02f79a874b2a401d6ee682
  $fReadOp76 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Add"#) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp77 :: Text.ParserCombinators.ReadP.P [MinHS.Syntax.Op]
  {- Unfolding: ((MinHS.Syntax.$fReadOp_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[MinHS.Syntax.Op]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <[MinHS.Syntax.Op]>_R)
                   @ [MinHS.Syntax.Op]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [MinHS.Syntax.Op])) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
                   MinHS.Syntax.$fReadOp49
                   MinHS.Syntax.$fReadOp9) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
                   MinHS.Syntax.$fReadOp45
                   MinHS.Syntax.$fReadOp10) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [MinHS.Syntax.Op]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [MinHS.Syntax.Op]
                   MinHS.Syntax.$fReadOp77) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [MinHS.Syntax.Op]
  {- Unfolding: (GHC.Read.list
                   @ MinHS.Syntax.Op
                   MinHS.Syntax.$fReadOp1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MinHS.Syntax.Op>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                    <MinHS.Syntax.Op>_R))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS MinHS.Syntax.Op
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ MinHS.Syntax.Op
                   (GHC.Read.$fRead()6
                      @ MinHS.Syntax.Op
                      MinHS.Syntax.$fReadOp2
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                <MinHS.Syntax.Op>_R))
                      n
                      @ MinHS.Syntax.Op
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ MinHS.Syntax.Op))) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fReadOp_sps ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.Op)
                   MinHS.Syntax.$fReadOp73
                   MinHS.Syntax.$fReadOp3) -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon :: GHC.Read.Read MinHS.Syntax.TyCon
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.Syntax.TyCon
                  MinHS.Syntax.$fReadTyCon_$creadsPrec
                  MinHS.Syntax.$fReadTyCon_$creadList
                  MinHS.Syntax.$fReadTyCon1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.TyCon>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <MinHS.Syntax.TyCon>_R))
                  MinHS.Syntax.$fReadTyCon_$creadListPrec -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.TyCon -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ MinHS.Syntax.TyCon
                   MinHS.Syntax.$fReadTyCon2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <MinHS.Syntax.TyCon>_R))) -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.TyCon)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadTyCon12,
                  MinHS.Syntax.$fReadTyCon11
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.TyCon>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <MinHS.Syntax.TyCon>_R)))) -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.TyCon -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.TyCon -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.Int) -}
d1dbf8309ce932885c1a4404ab04d448
  $fReadTyCon12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadTyCon13) -}
637117910cd702b38b0bb9b2576aca6c
  $fReadTyCon13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Int"#) -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.TyCon)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadTyCon16,
                  MinHS.Syntax.$fReadTyCon15
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.TyCon>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <MinHS.Syntax.TyCon>_R)))) -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.TyCon -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.TyCon -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.Bool) -}
cf5b5f8d386a55375cc062be7f24a9af
  $fReadTyCon16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadTyCon17) -}
7471630b0c73f95eeed31d341d06a1f8
  $fReadTyCon17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bool"#) -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.TyCon)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadTyCon20,
                  MinHS.Syntax.$fReadTyCon19
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.TyCon>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <MinHS.Syntax.TyCon>_R)))) -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.TyCon -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.TyCon -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.Unit) -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP MinHS.Syntax.TyCon
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec) ->
                 GHC.Read.choose2
                   @ MinHS.Syntax.TyCon
                   MinHS.Syntax.$fReadTyCon_sps
                   eta) -}
d30eb5f9ac3b24900c9bfb55ec2383e6
  $fReadTyCon20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadTyCon21) -}
bcee9af5e30d463178b81d19b5e42bb8
  $fReadTyCon21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Unit"#) -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon22 ::
    Text.ParserCombinators.ReadP.P [MinHS.Syntax.TyCon]
  {- Unfolding: ((MinHS.Syntax.$fReadTyCon_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[MinHS.Syntax.TyCon]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <[MinHS.Syntax.TyCon]>_R)
                   @ [MinHS.Syntax.TyCon]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [MinHS.Syntax.TyCon])) -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon3 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.TyCon)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.TyCon)
                   MinHS.Syntax.$fReadTyCon14
                   MinHS.Syntax.$fReadTyCon4) -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.TyCon)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.TyCon)
                   MinHS.Syntax.$fReadTyCon10
                   MinHS.Syntax.$fReadTyCon5) -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.TyCon)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.TyCon)
                   MinHS.Syntax.$fReadTyCon6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.TyCon))) -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.TyCon)
  {- Strictness: m,
     Unfolding: ((MinHS.Syntax.$fReadTyCon8,
                  MinHS.Syntax.$fReadTyCon7
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.TyCon>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <MinHS.Syntax.TyCon>_R)))) -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.TyCon -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (k :: MinHS.Syntax.TyCon -> Text.ParserCombinators.ReadP.P b) ->
                 k MinHS.Syntax.List) -}
e931122279bab4275f40f0057ce1b6af
  $fReadTyCon8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.Syntax.$fReadTyCon9) -}
007013c0933d855868630fd15fd92fbf
  $fReadTyCon9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("List"#) -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [MinHS.Syntax.TyCon]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [MinHS.Syntax.TyCon]
                   MinHS.Syntax.$fReadTyCon22) -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [MinHS.Syntax.TyCon]
  {- Unfolding: (GHC.Read.list
                   @ MinHS.Syntax.TyCon
                   MinHS.Syntax.$fReadTyCon1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MinHS.Syntax.TyCon>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                       <MinHS.Syntax.TyCon>_R))) -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS MinHS.Syntax.TyCon
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ MinHS.Syntax.TyCon
                   (GHC.Read.$fRead()6
                      @ MinHS.Syntax.TyCon
                      MinHS.Syntax.$fReadTyCon2
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                <MinHS.Syntax.TyCon>_R))
                      n
                      @ MinHS.Syntax.TyCon
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ MinHS.Syntax.TyCon))) -}
1fed023b922d36f77991acd4b11d2098
  $fReadTyCon_sps ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.TyCon)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec MinHS.Syntax.TyCon)
                   MinHS.Syntax.$fReadTyCon18
                   MinHS.Syntax.$fReadTyCon3) -}
0f0d82d3a4780c30c0769155ebac6d59
  $fReadType :: GHC.Read.Read MinHS.Syntax.Type
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.Syntax.Type
                  MinHS.Syntax.$fReadType_$creadsPrec
                  MinHS.Syntax.$fReadType_$creadList
                  MinHS.Syntax.$fReadType1
                    `cast`
                  ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <MinHS.Syntax.Type>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                     <MinHS.Syntax.Type>_R))
                  MinHS.Syntax.$fReadType_$creadListPrec -}
0f0d82d3a4780c30c0769155ebac6d59
  $fReadType1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (MinHS.Syntax.Type -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2,
     Unfolding: (GHC.Read.$fRead()6
                   @ MinHS.Syntax.Type
                   MinHS.Syntax.$fReadBind6
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MinHS.Syntax.Type>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <MinHS.Syntax.Type>_R))) -}
0f0d82d3a4780c30c0769155ebac6d59
  $fReadType2 :: Text.ParserCombinators.ReadP.P [MinHS.Syntax.Type]
  {- Unfolding: ((MinHS.Syntax.$fReadType_$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <[MinHS.Syntax.Type]>_R)
                    GHC.Read.$fRead()8)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <[MinHS.Syntax.Type]>_R)
                   @ [MinHS.Syntax.Type]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [MinHS.Syntax.Type])) -}
0f0d82d3a4780c30c0769155ebac6d59
  $fReadType_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [MinHS.Syntax.Type]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [MinHS.Syntax.Type]
                   MinHS.Syntax.$fReadType2) -}
0f0d82d3a4780c30c0769155ebac6d59
  $fReadType_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [MinHS.Syntax.Type]
  {- Unfolding: (GHC.Read.list
                   @ MinHS.Syntax.Type
                   MinHS.Syntax.$fReadType1
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <MinHS.Syntax.Type>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      <MinHS.Syntax.Type>_R))) -}
0f0d82d3a4780c30c0769155ebac6d59
  $fReadType_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS MinHS.Syntax.Type
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ MinHS.Syntax.Type
                   (GHC.Read.$fRead()6
                      @ MinHS.Syntax.Type
                      MinHS.Syntax.$fReadBind6
                        `cast`
                      ((<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <MinHS.Syntax.Type>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                         <MinHS.Syntax.Type>_R))
                      n
                      @ MinHS.Syntax.Type
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ MinHS.Syntax.Type))) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fShowBind :: GHC.Show.Show MinHS.Syntax.Bind
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.Syntax.Bind
                  MinHS.Syntax.$fShowBind_$cshowsPrec
                  MinHS.Syntax.$fShowBind_$cshow
                  MinHS.Syntax.$fShowBind_$cshowList -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fShowBind1 :: MinHS.Syntax.Bind -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,U,U,1*U)>,
     Unfolding: (\ (w :: MinHS.Syntax.Bind) ->
                 case w of ww { MinHS.Syntax.Bind ww1 ww2 ww3 ww4 ->
                 MinHS.Syntax.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 }) -}
763da911c40ec0a3d99dd077b9fd75bf
  $fShowBind2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bind "#) -}
911d5eff839e1dfad0010d65e49f7c89
  $fShowBind3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fShowBind_$cshow :: MinHS.Syntax.Bind -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MinHS.Syntax.Bind) ->
                 MinHS.Syntax.$fShowBind_$cshowsPrec
                   MinHS.Syntax.$fShowBind3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fShowBind_$cshowList :: [MinHS.Syntax.Bind] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MinHS.Syntax.Bind]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MinHS.Syntax.Bind
                   MinHS.Syntax.$fShowBind1
                   ls
                   s) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fShowBind_$cshowsPrec ::
    GHC.Types.Int -> MinHS.Syntax.Bind -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,U,U,1*U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: MinHS.Syntax.Bind) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { MinHS.Syntax.Bind ww3 ww4 ww5 ww6 ->
                 MinHS.Syntax.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 } }) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fShowExp :: GHC.Show.Show MinHS.Syntax.Exp
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.Syntax.Exp
                  MinHS.Syntax.$fShowExp_$cshowsPrec
                  MinHS.Syntax.$fShowExp_$cshow
                  MinHS.Syntax.$fShowExp_$cshowList -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fShowExp1 :: MinHS.Syntax.Exp -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: MinHS.Syntax.Exp) ->
                 MinHS.Syntax.$w$cshowsPrec2 0# w) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fShowExp_$cshow :: MinHS.Syntax.Exp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MinHS.Syntax.Exp) ->
                 MinHS.Syntax.$fShowExp_$cshowsPrec
                   MinHS.Syntax.$fShowBind3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fShowExp_$cshowList :: [MinHS.Syntax.Exp] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MinHS.Syntax.Exp]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MinHS.Syntax.Exp
                   MinHS.Syntax.$fShowExp1
                   ls
                   s) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $fShowExp_$cshowsPrec ::
    GHC.Types.Int -> MinHS.Syntax.Exp -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: MinHS.Syntax.Exp) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MinHS.Syntax.$w$cshowsPrec2 ww1 w1 }) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fShowOp :: GHC.Show.Show MinHS.Syntax.Op
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.Syntax.Op
                  MinHS.Syntax.$fShowOp_$cshowsPrec
                  MinHS.Syntax.$fShowOp_$cshow
                  MinHS.Syntax.$fShowOp_$cshowList -}
775e4e05cc11aefa57ad9c1dd3358091
  $fShowOp_$cshow :: MinHS.Syntax.Op -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: MinHS.Syntax.Op) ->
                 case x of wild {
                   MinHS.Syntax.Add -> MinHS.Syntax.$fReadOp75
                   MinHS.Syntax.Sub -> MinHS.Syntax.$fReadOp71
                   MinHS.Syntax.Mul -> MinHS.Syntax.$fReadOp67
                   MinHS.Syntax.Quot -> MinHS.Syntax.$fReadOp63
                   MinHS.Syntax.Rem -> MinHS.Syntax.$fReadOp59
                   MinHS.Syntax.Neg -> MinHS.Syntax.$fReadOp55
                   MinHS.Syntax.Gt -> MinHS.Syntax.$fReadOp51
                   MinHS.Syntax.Ge -> MinHS.Syntax.$fReadOp47
                   MinHS.Syntax.Lt -> MinHS.Syntax.$fReadOp43
                   MinHS.Syntax.Le -> MinHS.Syntax.$fReadOp39
                   MinHS.Syntax.Eq -> MinHS.Syntax.$fReadOp35
                   MinHS.Syntax.Ne -> MinHS.Syntax.$fReadOp31
                   MinHS.Syntax.Head -> MinHS.Syntax.$fReadOp27
                   MinHS.Syntax.Tail -> MinHS.Syntax.$fReadOp23
                   MinHS.Syntax.Null -> MinHS.Syntax.$fReadOp19 }) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fShowOp_$cshowList :: [MinHS.Syntax.Op] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MinHS.Syntax.Op]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MinHS.Syntax.Op
                   MinHS.Syntax.$w$cshowsPrec3
                   ls
                   s) -}
775e4e05cc11aefa57ad9c1dd3358091
  $fShowOp_$cshowsPrec ::
    GHC.Types.Int -> MinHS.Syntax.Op -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: MinHS.Syntax.Op)
                   (w2 :: GHC.Base.String) ->
                 MinHS.Syntax.$w$cshowsPrec3 w1 w2) -}
1fed023b922d36f77991acd4b11d2098
  $fShowTyCon :: GHC.Show.Show MinHS.Syntax.TyCon
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.Syntax.TyCon
                  MinHS.Syntax.$fShowTyCon_$cshowsPrec
                  MinHS.Syntax.$fShowTyCon_$cshow
                  MinHS.Syntax.$fShowTyCon_$cshowList -}
1fed023b922d36f77991acd4b11d2098
  $fShowTyCon_$cshow :: MinHS.Syntax.TyCon -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MinHS.Syntax.TyCon) ->
                 case x of wild {
                   MinHS.Syntax.Unit -> MinHS.Syntax.$fReadTyCon20
                   MinHS.Syntax.Bool -> MinHS.Syntax.$fReadTyCon16
                   MinHS.Syntax.Int -> MinHS.Syntax.$fReadTyCon12
                   MinHS.Syntax.List -> MinHS.Syntax.$fReadTyCon8 }) -}
1fed023b922d36f77991acd4b11d2098
  $fShowTyCon_$cshowList :: [MinHS.Syntax.TyCon] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MinHS.Syntax.TyCon]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MinHS.Syntax.TyCon
                   MinHS.Syntax.$w$cshowsPrec4
                   ls
                   s) -}
1fed023b922d36f77991acd4b11d2098
  $fShowTyCon_$cshowsPrec ::
    GHC.Types.Int -> MinHS.Syntax.TyCon -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: MinHS.Syntax.TyCon)
                   (w2 :: GHC.Base.String) ->
                 MinHS.Syntax.$w$cshowsPrec4 w1 w2) -}
0f0d82d3a4780c30c0769155ebac6d59
  $fShowType :: GHC.Show.Show MinHS.Syntax.Type
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.Syntax.Type
                  MinHS.Syntax.$fShowType_$cshowsPrec
                  MinHS.Syntax.$fShowType_$cshow
                  MinHS.Syntax.$fShowType_$cshowList -}
0f0d82d3a4780c30c0769155ebac6d59
  $fShowType1 :: MinHS.Syntax.Type -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: MinHS.Syntax.Type) (w1 :: GHC.Base.String) ->
                 MinHS.Syntax.$w$cshowsPrec1 0# w w1) -}
0f0d82d3a4780c30c0769155ebac6d59
  $fShowType_$cshow :: MinHS.Syntax.Type -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MinHS.Syntax.Type) ->
                 MinHS.Syntax.$fShowType_$cshowsPrec
                   MinHS.Syntax.$fShowBind3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0f0d82d3a4780c30c0769155ebac6d59
  $fShowType_$cshowList :: [MinHS.Syntax.Type] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MinHS.Syntax.Type]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MinHS.Syntax.Type
                   MinHS.Syntax.$fShowType1
                   ls
                   s) -}
0f0d82d3a4780c30c0769155ebac6d59
  $fShowType_$cshowsPrec ::
    GHC.Types.Int -> MinHS.Syntax.Type -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: MinHS.Syntax.Type)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MinHS.Syntax.$w$cshowsPrec1 ww1 w1 w2 }) -}
1a9ab4867c7b0727df9c978b4ca91129
  $tc'Add :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3076700488204529654##
                   18360581800071076277##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Add2
                   0#
                   MinHS.Syntax.$tc'Add1) -}
0f2a439f8d06dfef6881ed745c361844
  $tc'Add1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
56ad982935ef12269a292fa065d8c7b9
  $tc'Add2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Add3) -}
374f5dafa48c8fc801843affcc67956c
  $tc'Add3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Add"#) -}
ee6bda7d42691e85679df965692cc666
  $tc'App :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9774072749987158728##
                   3265692743668335924##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'App2
                   0#
                   MinHS.Syntax.$tc'App1) -}
0194375d0d4a8c8bdc43f021cbcf3870
  $tc'App1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1e94acf1462ee6e8345e6314d24daee1
  $tc'App2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'App3) -}
0e02889076ef894f65ae3e9258352aba
  $tc'App3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'App"#) -}
7cb57ae0b585108447304c4e62cc7c00
  $tc'Arrow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14509512552243706041##
                   1860295511694915259##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Arrow2
                   0#
                   MinHS.Syntax.$tc'Arrow1) -}
fa454703f79b1b767e1ce1c1fd11345e
  $tc'Arrow1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
78ab19aca4a3397539812eee38bc0999
  $tc'Arrow2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Arrow3) -}
f4196cfc248300375239b97f4b5aceee
  $tc'Arrow3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Arrow"#) -}
69a037d93fe32c99470f2dd47d4dda32
  $tc'Bind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16519619150721563326##
                   15924376582320716537##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Bind2
                   0#
                   MinHS.Syntax.$tc'Bind1) -}
b67ee9e5d6c81cbb7c0584c80c74cf8a
  $tc'Bind1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
19436d57fea027d73ce14a1423ef5d67
  $tc'Bind2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Bind3) -}
1493176749e33e804d1e33e4f33d5c3d
  $tc'Bind3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Bind"#) -}
f2fafd3eacd0a7d68c120c36d85de923
  $tc'Bool :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13256937343483852002##
                   8143473835922358094##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Bool2
                   0#
                   MinHS.Syntax.$tc'Bool1) -}
c88b59ee647f739c0ff9fbf43a640b60
  $tc'Bool1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
2bf4d9a44787187e1c90e0ef7e1dc6ea
  $tc'Bool2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Bool3) -}
fbb4527ac3ba266b6f47d48f6de93e43
  $tc'Bool3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Bool"#) -}
e866311db45637bf17e90d587c1f7268
  $tc'Con :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13022923819744082063##
                   5260511963637585205##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Con2
                   0#
                   MinHS.Syntax.$tc'Con1) -}
3fcd6e4be4d32571c8f866daefe9b98e
  $tc'Con1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bb2bee7ffa88ca013328814d7a1d30bf
  $tc'Con2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Con3) -}
ef3517581a3014c938b874bc95c595f7
  $tc'Con3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Con"#) -}
5a70733912c0de4af9557006e4969f5a
  $tc'Eq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9984136698180152227##
                   15330072730310073610##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Eq1
                   0#
                   MinHS.Syntax.$tc'Add1) -}
5cdacebcf1b57c8dfad82c0ab05e072e
  $tc'Eq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Eq2) -}
ebc40ec43d664703a84f9b76930a66cf
  $tc'Eq2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Eq"#) -}
0e7a87b01c0696f5a273c4a34321a7da
  $tc'Ge :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3537118763594561538##
                   16814952478914966999##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Ge1
                   0#
                   MinHS.Syntax.$tc'Add1) -}
49db9c8e46415fcb33ebceef649ed4ff
  $tc'Ge1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Ge2) -}
b85966f641bab0307cf30f2c139ea3ff
  $tc'Ge2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Ge"#) -}
738b806012bea9f5fdff6f19a57d99d6
  $tc'Gt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3621182640675212999##
                   16583242476874417295##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Gt1
                   0#
                   MinHS.Syntax.$tc'Add1) -}
3f0917bad1eb202b481c7df7c48ee36a
  $tc'Gt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Gt2) -}
b85c25ec9f421ced33921291124457ab
  $tc'Gt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Gt"#) -}
b2230cffa562233fd2181ea25b9f1dfd
  $tc'Head :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15704687337666413751##
                   8546759439961234830##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Head1
                   0#
                   MinHS.Syntax.$tc'Add1) -}
2d71acb50a11b8fd19e44d5c6de72943
  $tc'Head1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Head2) -}
dbe459f3681f8757d480f25a2a6da960
  $tc'Head2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Head"#) -}
098e347c3879f81f0af3849ee9fa2cab
  $tc'If :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4540347608826912596##
                   2249221775260027598##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'If2
                   0#
                   MinHS.Syntax.$tc'If1) -}
651406dda70e2a1d4258fc5f6ffcb8c1
  $tc'If1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8cd241fe4cbb9e270ff320c1db116d3e
  $tc'If2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'If3) -}
89feb355d6a69b72bd1647e5b70fb632
  $tc'If3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'If"#) -}
cee81aec9af22b8b15de1e2ec6216540
  $tc'Int :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14390921329793389212##
                   661035744896812976##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Int1
                   0#
                   MinHS.Syntax.$tc'Bool1) -}
ffdf80a77b68664b25d1fdbca95ce7a1
  $tc'Int1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Int2) -}
5992166f4132899a81b17bd8552b2e60
  $tc'Int2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Int"#) -}
6af09b6da6bd02c60770cfcab72002f6
  $tc'Le :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7789890238360578339##
                   10849111522543700407##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Le1
                   0#
                   MinHS.Syntax.$tc'Add1) -}
97a8cd3154c1fb174d64d286c8b21c81
  $tc'Le1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Le2) -}
8889130126b5b0bdb6710f4460268855
  $tc'Le2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Le"#) -}
17b481f270b313dbf9cf0915970dcf9b
  $tc'Let :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15860090660980514780##
                   2648398053300212894##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Let2
                   0#
                   MinHS.Syntax.$tc'Let1) -}
1f2732a2389ec6bf2e7ad3b013a951ce
  $tc'Let1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dc63bd8149689f5e5622dd47de063655
  $tc'Let2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Let3) -}
2fe25bad13908f8ef2397b50f0de5da9
  $tc'Let3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Let"#) -}
c520d6b3d4d9d350cf896276bdec4bd6
  $tc'Letrec :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11841580709270382859##
                   4591362519309477026##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Letrec1
                   0#
                   MinHS.Syntax.$tc'Let1) -}
769f76f8a961a35b818c48eaabfce59e
  $tc'Letrec1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Letrec2) -}
a2d6cc707737043bfc6b0c0e65f0873e
  $tc'Letrec2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Letrec"#) -}
6fc255f4f6bf01b69958c814cf126c1a
  $tc'List :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6403542452933649434##
                   5222629481627091735##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'List1
                   0#
                   MinHS.Syntax.$tc'Bool1) -}
09d00d9032d55493dafc4dacec4a70e4
  $tc'List1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'List2) -}
0d7f4d84b1b1f5ab9c86e2cc31ff1dc1
  $tc'List2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'List"#) -}
32df1bca77223e14a4ceeb347a319e56
  $tc'Lt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1959215813345418546##
                   13078172084592967181##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Lt1
                   0#
                   MinHS.Syntax.$tc'Add1) -}
ff6c4fe0f2d06674bf0fe865d4af9f7f
  $tc'Lt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Lt2) -}
c947f173ef7c40736a9a75810726d779
  $tc'Lt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Lt"#) -}
9abc62621b50be18b49e5b74876d94ac
  $tc'Mul :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8035462856051464642##
                   10323400309605500306##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Mul1
                   0#
                   MinHS.Syntax.$tc'Add1) -}
95d0598919e8ef01d5fd82085da9efa7
  $tc'Mul1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Mul2) -}
8756753137e089f0657c5b4f173e1904
  $tc'Mul2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Mul"#) -}
5cf313b00327c60e6b9e636410568aca
  $tc'Ne :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1570014913478341772##
                   4952962798682674115##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Ne1
                   0#
                   MinHS.Syntax.$tc'Add1) -}
28915ef7da03ff9c8d0c65eea62f50ce
  $tc'Ne1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Ne2) -}
eed105afe1ac9f71129390892b7b26cd
  $tc'Ne2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Ne"#) -}
069ff710f63ebc532b14cec08bcb1ce7
  $tc'Neg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11800236824485246215##
                   2247137781598570756##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Neg1
                   0#
                   MinHS.Syntax.$tc'Add1) -}
4b1ea79c5d16d1ab58c3ede7875d67d5
  $tc'Neg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Neg2) -}
d1e1b2b4b1faf07affabfacecf8624c0
  $tc'Neg2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Neg"#) -}
48c10fd964f17b128c914d0505e8620e
  $tc'Null :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2879552848311898933##
                   16283285702847804894##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Null1
                   0#
                   MinHS.Syntax.$tc'Add1) -}
23785fc509129087e7a912d9d24527ff
  $tc'Null1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Null2) -}
1ddd710694a26d0190632bb62217ea89
  $tc'Null2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Null"#) -}
e9563bc3985afc674d1f4071b777eacf
  $tc'Num :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10205909053284669682##
                   11150031919476848822##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Num2
                   0#
                   MinHS.Syntax.$tc'Num1) -}
4a300d0e47b07fe071347e6461835dae
  $tc'Num1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
23cc51c0edcef9392c1a7a6400751470
  $tc'Num2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Num3) -}
da75fda657de8c2b32e9a99c43f00a2f
  $tc'Num3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Num"#) -}
955be09ac4c36ccb4e1fe2edfdf6b444
  $tc'Prim :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14383540135015281972##
                   16580987212825775264##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Prim2
                   0#
                   MinHS.Syntax.$tc'Prim1) -}
fcff4bf0870fcf5f40e9a9466f8502e5
  $tc'Prim1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2b6f10a330931c2f7710b741071bc882
  $tc'Prim2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Prim3) -}
8ca6aa80280c194681259412f89a636c
  $tc'Prim3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Prim"#) -}
0970b86c42a93c42f8ce60de8171cc79
  $tc'Quot :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4823216258860734725##
                   15736101058112246117##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Quot1
                   0#
                   MinHS.Syntax.$tc'Add1) -}
7572a75ce1aab0dde878fac3753f2057
  $tc'Quot1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Quot2) -}
e3d5519b4191a18b2195c9778108cdd0
  $tc'Quot2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Quot"#) -}
0fbc70f9bc536b6eb44f764126e4a684
  $tc'Recfun :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12056611479228797988##
                   2247209523873002192##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Recfun2
                   0#
                   MinHS.Syntax.$tc'Recfun1) -}
1cf7be6e1863914c937908ff50af4a60
  $tc'Recfun1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
143bed2e735dbc43fe8b52f824398198
  $tc'Recfun2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Recfun3) -}
fdb73469fd5cf0319f21fe618e2c7b57
  $tc'Recfun3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Recfun"#) -}
6c7d48e03935359bb70d358942704711
  $tc'Rem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5253724000218164078##
                   16671690637628405593##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Rem1
                   0#
                   MinHS.Syntax.$tc'Add1) -}
97bee6425bcc23ce12665f5eb635c096
  $tc'Rem1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Rem2) -}
535edac3b916b9d953f12c71cf101774
  $tc'Rem2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Rem"#) -}
50e012e6232621dbacaf1cbd368f2cfa
  $tc'Sub :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12638401531780566769##
                   3985204427447925129##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Sub1
                   0#
                   MinHS.Syntax.$tc'Add1) -}
c61be89015670165e6e34ecc45ba2535
  $tc'Sub1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Sub2) -}
da2512e8243dde9cc4b454bd31f2b8ef
  $tc'Sub2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Sub"#) -}
a0168528ad7aa4686940f3f81d8a7238
  $tc'Tail :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9535486397142952586##
                   5188501291683258474##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Tail1
                   0#
                   MinHS.Syntax.$tc'Add1) -}
da622c60c92abaf994b3919801206825
  $tc'Tail1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Tail2) -}
8568147b42a681f490927a718dfec626
  $tc'Tail2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Tail"#) -}
350ee60ccabd7875de59707dc582094b
  $tc'TypeApp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4850697360701293786##
                   5887376609429208254##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'TypeApp1
                   0#
                   MinHS.Syntax.$tc'Arrow1) -}
9615a0952432cba1abea48b55997b53e
  $tc'TypeApp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'TypeApp2) -}
d4b4da51cc65948cd43e51c6d64f4407
  $tc'TypeApp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeApp"#) -}
477badd7e3972456de2ca4c67a9a73a1
  $tc'TypeCon :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11330716313826083724##
                   12827397261551474784##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'TypeCon2
                   0#
                   MinHS.Syntax.$tc'TypeCon1) -}
a29c258fd5b8182852643c36ad243522
  $tc'TypeCon1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b83419df9ef828acb5e1d473476e5311
  $tc'TypeCon2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'TypeCon3) -}
19cfdf6908a27c06e5012786ff97fccb
  $tc'TypeCon3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeCon"#) -}
9e90faf8e38d7c4c2f1c6a0b0c3e6281
  $tc'Unit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17890696375966139570##
                   1023050398081355518##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Unit1
                   0#
                   MinHS.Syntax.$tc'Bool1) -}
2bef25b450cd5c6d497ec16b3f107736
  $tc'Unit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Unit2) -}
1612b065fe66e6f473e8e1f035b8bce2
  $tc'Unit2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Unit"#) -}
a2834723b2dffb61dc9453171772327d
  $tc'Var :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4349959950689256307##
                   3408843183264490370##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tc'Var1
                   0#
                   MinHS.Syntax.$tc'Con1) -}
f0704a588ea115a8dedf99410ce97a70
  $tc'Var1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tc'Var2) -}
862c5693c9a3eafb5c68a2e33c63c137
  $tc'Var2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Var"#) -}
5f9d52c6e46a96e19a026baf0867ce62
  $tcBind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6576996836117197869##
                   15322585224256366380##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tcBind1
                   0#
                   GHC.Types.krep$*) -}
3b2dd4c6aa446652734a164984d60583
  $tcBind1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$fReadBind4) -}
e3df35d9f64138e1922631f0aca85021
  $tcExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14983057603344956249##
                   14313767930425091710##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tcExp1
                   0#
                   GHC.Types.krep$*) -}
9151af2f628313ab799d158a949e8dbb
  $tcExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tcExp2) -}
cecd0c27a391f905c98611aaa26ce26d
  $tcExp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Exp"#) -}
e3772f6462c474ae6a469757d61fb262
  $tcOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13438727377463871422##
                   15244639564112167674##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tcOp1
                   0#
                   GHC.Types.krep$*) -}
7b15e8f8950e911016971006894556fb
  $tcOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tcOp2) -}
43e02b6d5f2c10b60a5b2004ca999c5b
  $tcOp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Op"#) -}
0b5a97b68f049f0f6f107fd0ba251882
  $tcTyCon :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11232136695741101324##
                   13647393222520281652##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tcTyCon1
                   0#
                   GHC.Types.krep$*) -}
83eac724cc4ee11cf0a0d2c7b7fcac3a
  $tcTyCon1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tcTyCon2) -}
0f1e0c11607f4c5841c1d44cb924a94c
  $tcTyCon2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TyCon"#) -}
1a960ac4b04fe16bf0beeae735529c6d
  $tcType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6368330006594500132##
                   2995331181781524870##
                   MinHS.Syntax.$trModule
                   MinHS.Syntax.$tcType1
                   0#
                   GHC.Types.krep$*) -}
108dd70d89bf129fddd70595055fb4e9
  $tcType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$tcType2) -}
0486f54f55fde67590dfc24e1f061460
  $tcType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Type"#) -}
0a9af4d073bb20d759fac5d1ecb49b5f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MinHS.Syntax.$trModule3
                   MinHS.Syntax.$trModule1) -}
73aaccdaf9e64627500e93b0c71b7fe5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$trModule2) -}
f977f81984a21d79b20e31a8997600f9
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MinHS.Syntax"#) -}
431f15858b23e5d62675b7bbdc91f928
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.Syntax.$trModule4) -}
dfae4295973752c42f3d3fab725d29c0
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $w$c== ::
    MinHS.Syntax.Id
    -> MinHS.Syntax.Type
    -> [MinHS.Syntax.Id]
    -> MinHS.Syntax.Exp
    -> MinHS.Syntax.Id
    -> MinHS.Syntax.Type
    -> [MinHS.Syntax.Id]
    -> MinHS.Syntax.Exp
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [2],
     Unfolding: (\ (ww :: MinHS.Syntax.Id)
                   (ww1 :: MinHS.Syntax.Type)
                   (ww2 :: [MinHS.Syntax.Id])
                   (ww3 :: MinHS.Syntax.Exp)
                   (ww4 :: MinHS.Syntax.Id)
                   (ww5 :: MinHS.Syntax.Type)
                   (ww6 :: [MinHS.Syntax.Id])
                   (ww7 :: MinHS.Syntax.Exp) ->
                 case GHC.Base.eqString ww ww4 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case MinHS.Syntax.$fEqBind_$c==2 ww1 ww5 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Classes.$fEq[]_$s$c==1 ww2 ww6 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> MinHS.Syntax.$fEqBind_$c==1 ww3 ww7 } } }) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (MinHS.Syntax.Bind -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   @ b
                   (w :: MinHS.Syntax.Bind -> Text.ParserCombinators.ReadP.P b) ->
                 case GHC.Prim.<=# ww 10# of lwild {
                   DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                   1#
                   -> let {
                        lvl117 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl118 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$fRead()6
                                @ GHC.Base.String
                                GHC.Read.$fReadChar2
                                  `cast`
                                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                          <GHC.Base.String>_R))
                                MinHS.Syntax.$fReadBind7
                                @ b
                                (\ (a1 :: MinHS.Syntax.Id) ->
                                 GHC.Read.$fRead()6
                                   @ MinHS.Syntax.Type
                                   MinHS.Syntax.$fReadBind6
                                     `cast`
                                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                   <MinHS.Syntax.Type>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                      <MinHS.Syntax.Type>_R))
                                   MinHS.Syntax.$fReadBind7
                                   @ b
                                   (\ (a2 :: MinHS.Syntax.Type) ->
                                    (GHC.Read.$fRead[]_$s$creadListPrec1
                                       `cast`
                                     (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                          <[MinHS.Syntax.Id]>_R)
                                       MinHS.Syntax.$fReadBind7)
                                      `cast`
                                    (Text.ParserCombinators.ReadP.N:ReadP[0] <[MinHS.Syntax.Id]>_R)
                                      @ b
                                      (\ (a3 :: [MinHS.Syntax.Id]) ->
                                       GHC.Read.$fRead()6
                                         @ MinHS.Syntax.Exp
                                         MinHS.Syntax.$fReadBind5
                                           `cast`
                                         ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                           ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                         <MinHS.Syntax.Exp>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                                           <MinHS.Syntax.Exp>_R))
                                         MinHS.Syntax.$fReadBind7
                                         @ b
                                         (\ (a4 :: MinHS.Syntax.Exp) ->
                                          w (MinHS.Syntax.Bind a1 a2 a3 a4)))))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ (a3 :: Text.Read.Lex.Lexeme) ->
                             case a3 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a1
                               -> case GHC.Base.eqString a1 MinHS.Syntax.$fReadBind3 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl118 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>,
                             Unfolding: InlineRule (1, True, True) (\ (a3 :: ()) -> lvl117) -}
                        = \ (a3 :: ()) -> lvl117
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ (a :: GHC.Base.String) ->
                         Text.ParserCombinators.ReadP.skipSpaces2 a @ b k) }) -}
5cd0e4dc4577078c5458ab29323fc9fb
  $w$creadPrec1 ::
    GHC.Prim.Int#
    -> forall b.
       (MinHS.Syntax.Exp -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [2] -}
0f0d82d3a4780c30c0769155ebac6d59
  $w$creadPrec2 ::
    GHC.Prim.Int#
    -> forall b.
       (MinHS.Syntax.Type -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [2] -}
5cd0e4dc4577078c5458ab29323fc9fb
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> MinHS.Syntax.Id
    -> MinHS.Syntax.Type
    -> [MinHS.Syntax.Id]
    -> MinHS.Syntax.Exp
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <S,U><L,U><L,U><L,U><L,1*U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: MinHS.Syntax.Id)
                   (ww2 :: MinHS.Syntax.Type)
                   (ww3 :: [MinHS.Syntax.Id])
                   (ww4 :: MinHS.Syntax.Exp) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = MinHS.Syntax.$w$cshowsPrec2 11# ww4
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       MinHS.Syntax.$fShowBind2
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.$fShow(,)3
                          (GHC.Show.showLitString
                             ww1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (MinHS.Syntax.$w$cshowsPrec1
                                      11#
                                      ww2
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.showSpace1
                                         (let {
                                            s :: GHC.Base.String = g x
                                          } in
                                          let {
                                            s1 :: GHC.Base.String
                                            = GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 s
                                          } in
                                          case ww3 of wild {
                                            []
                                            -> GHC.CString.unpackAppendCString#
                                                 GHC.Show.showList__4
                                                 s1
                                            : x1 xs
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showList__3
                                                 (GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.$fShow(,)3
                                                    (GHC.Show.showLitString
                                                       x1
                                                       (GHC.Types.:
                                                          @ GHC.Types.Char
                                                          GHC.Show.$fShow(,)3
                                                          (let {
                                                             lvl43 :: [GHC.Types.Char]
                                                             = GHC.Types.:
                                                                 @ GHC.Types.Char
                                                                 GHC.Show.showList__2
                                                                 s1
                                                           } in
                                                           letrec {
                                                             showl :: [[GHC.Types.Char]]
                                                                      -> GHC.Base.String
                                                               {- Arity: 1, Strictness: <S,1*U> -}
                                                             = \ (ds2 :: [[GHC.Types.Char]]) ->
                                                               case ds2 of wild1 {
                                                                 [] -> lvl43
                                                                 : y ys
                                                                 -> GHC.Types.:
                                                                      @ GHC.Types.Char
                                                                      GHC.Show.showList__1
                                                                      (GHC.Types.:
                                                                         @ GHC.Types.Char
                                                                         GHC.Show.$fShow(,)3
                                                                         (GHC.Show.showLitString
                                                                            y
                                                                            (GHC.Types.:
                                                                               @ GHC.Types.Char
                                                                               GHC.Show.$fShow(,)3
                                                                               (showl ys)))) }
                                                           } in
                                                           showl xs)))) })))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
0f0d82d3a4780c30c0769155ebac6d59
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> MinHS.Syntax.Type -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [2] -}
5cd0e4dc4577078c5458ab29323fc9fb
  $w$cshowsPrec2 ::
    GHC.Prim.Int# -> MinHS.Syntax.Exp -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [2] -}
775e4e05cc11aefa57ad9c1dd3358091
  $w$cshowsPrec3 ::
    MinHS.Syntax.Op -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [2],
     Unfolding: (\ (w :: MinHS.Syntax.Op) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   MinHS.Syntax.Add
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadOp75 w1
                   MinHS.Syntax.Sub
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadOp71 w1
                   MinHS.Syntax.Mul
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadOp67 w1
                   MinHS.Syntax.Quot
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadOp63 w1
                   MinHS.Syntax.Rem
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadOp59 w1
                   MinHS.Syntax.Neg
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadOp55 w1
                   MinHS.Syntax.Gt
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadOp51 w1
                   MinHS.Syntax.Ge
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadOp47 w1
                   MinHS.Syntax.Lt
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadOp43 w1
                   MinHS.Syntax.Le
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadOp39 w1
                   MinHS.Syntax.Eq
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadOp35 w1
                   MinHS.Syntax.Ne
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadOp31 w1
                   MinHS.Syntax.Head
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadOp27 w1
                   MinHS.Syntax.Tail
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadOp23 w1
                   MinHS.Syntax.Null
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadOp19 w1 }) -}
1fed023b922d36f77991acd4b11d2098
  $w$cshowsPrec4 ::
    MinHS.Syntax.TyCon -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [2],
     Unfolding: (\ (w :: MinHS.Syntax.TyCon) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   MinHS.Syntax.Unit
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadTyCon20 w1
                   MinHS.Syntax.Bool
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadTyCon16 w1
                   MinHS.Syntax.Int
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadTyCon12 w1
                   MinHS.Syntax.List
                   -> GHC.Base.++ @ GHC.Types.Char MinHS.Syntax.$fReadTyCon8 w1 }) -}
5cd0e4dc4577078c5458ab29323fc9fb
  data Bind
    = Bind MinHS.Syntax.Id
           MinHS.Syntax.Type
           [MinHS.Syntax.Id]
           MinHS.Syntax.Exp
5cd0e4dc4577078c5458ab29323fc9fb
  data Exp
    = Var MinHS.Syntax.Id
    | Prim MinHS.Syntax.Op
    | Con MinHS.Syntax.Id
    | Num GHC.Integer.Type.Integer
    | App MinHS.Syntax.Exp MinHS.Syntax.Exp
    | If MinHS.Syntax.Exp MinHS.Syntax.Exp MinHS.Syntax.Exp
    | Let [MinHS.Syntax.Bind] MinHS.Syntax.Exp
    | Recfun MinHS.Syntax.Bind
    | Letrec [MinHS.Syntax.Bind] MinHS.Syntax.Exp
39dd4c711cd200360082729e5c3a320f
  type Id = GHC.Base.String
775e4e05cc11aefa57ad9c1dd3358091
  data Op
    = Add
    | Sub
    | Mul
    | Quot
    | Rem
    | Neg
    | Gt
    | Ge
    | Lt
    | Le
    | Eq
    | Ne
    | Head
    | Tail
    | Null
abb774a32fac37ba934a5fb26a6980a8
  type Program = [MinHS.Syntax.Bind]
1fed023b922d36f77991acd4b11d2098
  data TyCon = Unit | Bool | Int | List
0f0d82d3a4780c30c0769155ebac6d59
  data Type
    = Arrow MinHS.Syntax.Type MinHS.Syntax.Type
    | TypeApp MinHS.Syntax.Type MinHS.Syntax.Type
    | TypeCon MinHS.Syntax.TyCon
4c293889be8a38359403738e350a0158
  binApply ::
    MinHS.Syntax.Exp
    -> MinHS.Syntax.Exp -> MinHS.Syntax.Exp -> MinHS.Syntax.Exp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m5,
     Unfolding: InlineRule (3, True, False)
                (\ (e1 :: MinHS.Syntax.Exp)
                   (e2 :: MinHS.Syntax.Exp)
                   (e3 :: MinHS.Syntax.Exp) ->
                 MinHS.Syntax.App (MinHS.Syntax.App e1 e2) e3) -}
5744d6cabbb6ebe05e0fc71ce2352679
  binTyApp ::
    MinHS.Syntax.Type
    -> MinHS.Syntax.Type -> MinHS.Syntax.Type -> MinHS.Syntax.Type
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m2,
     Unfolding: InlineRule (3, True, False)
                (\ (t1 :: MinHS.Syntax.Type)
                   (t2 :: MinHS.Syntax.Type)
                   (t3 :: MinHS.Syntax.Type) ->
                 MinHS.Syntax.TypeApp (MinHS.Syntax.TypeApp t1 t2) t3) -}
instance [safe] GHC.Classes.Eq [MinHS.Syntax.Bind]
  = MinHS.Syntax.$fEqBind
instance [safe] GHC.Classes.Eq [MinHS.Syntax.Exp]
  = MinHS.Syntax.$fEqExp
instance [safe] GHC.Classes.Eq [MinHS.Syntax.Op]
  = MinHS.Syntax.$fEqOp
instance [safe] GHC.Classes.Eq [MinHS.Syntax.TyCon]
  = MinHS.Syntax.$fEqTyCon
instance [safe] GHC.Classes.Eq [MinHS.Syntax.Type]
  = MinHS.Syntax.$fEqType
instance [safe] GHC.Classes.Ord [MinHS.Syntax.TyCon]
  = MinHS.Syntax.$fOrdTyCon
instance [safe] GHC.Classes.Ord [MinHS.Syntax.Type]
  = MinHS.Syntax.$fOrdType
instance [safe] GHC.Read.Read [MinHS.Syntax.Bind]
  = MinHS.Syntax.$fReadBind
instance [safe] GHC.Read.Read [MinHS.Syntax.Exp]
  = MinHS.Syntax.$fReadExp
instance [safe] GHC.Read.Read [MinHS.Syntax.Op]
  = MinHS.Syntax.$fReadOp
instance [safe] GHC.Read.Read [MinHS.Syntax.TyCon]
  = MinHS.Syntax.$fReadTyCon
instance [safe] GHC.Read.Read [MinHS.Syntax.Type]
  = MinHS.Syntax.$fReadType
instance [safe] GHC.Show.Show [MinHS.Syntax.Bind]
  = MinHS.Syntax.$fShowBind
instance [safe] GHC.Show.Show [MinHS.Syntax.Exp]
  = MinHS.Syntax.$fShowExp
instance [safe] GHC.Show.Show [MinHS.Syntax.Op]
  = MinHS.Syntax.$fShowOp
instance [safe] GHC.Show.Show [MinHS.Syntax.TyCon]
  = MinHS.Syntax.$fShowTyCon
instance [safe] GHC.Show.Show [MinHS.Syntax.Type]
  = MinHS.Syntax.$fShowType
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

