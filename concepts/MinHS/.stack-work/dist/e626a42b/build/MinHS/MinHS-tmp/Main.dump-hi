
==================== FINAL INTERFACE ====================
2019-12-10 18:24:18.2981011 UTC

interface main:Main 8065
  interface hash: 25f51e756e681e4cc65c541ddbc8fca3
  ABI hash: 14aead3beedfdd67f4ad9afabf7ea579
  export-list hash: 4ed631f2b99f960f75c8c699ad166405
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 940645c91f96fac14a226b1431433777
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies: MinHS.Env MinHS.Evaluator MinHS.Parse
                     MinHS.Pretty MinHS.Syntax MinHS.TypeChecker
package dependencies: Win32-2.6.1.0 ansi-terminal-0.9.1
                      ansi-wl-pprint-0.6.9 array-0.5.3.0 base-4.12.0.0 binary-0.8.6.0
                      bytestring-0.10.8.2 colour-2.3.5 containers-0.6.0.1 deepseq-1.4.4.0
                      directory-1.3.3.0 filepath-1.4.2.1 ghc-prim-0.5.3
                      integer-gmp-1.0.2.0 mintty-0.1.2 mtl-2.2.2
                      optparse-applicative-0.14.3.0 parsec-3.1.14.0 process-1.6.5.0
                      text-1.2.3.1 time-1.8.0.2 transformers-0.5.6.2
orphans: text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         transformers-0.5.6.2:Control.Monad.Trans.Error main:MinHS.Pretty
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian colour-2.3.5:Data.Colour
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
import  -/  ansi-wl-pprint-0.6.9:Text.PrettyPrint.ANSI.Leijen d72f9b92792fcc17532ee58e54d97728
import  -/  ansi-wl-pprint-0.6.9:Text.PrettyPrint.ANSI.Leijen.Internal 19c78a752306db18ff4680b834e38fc5
import  -/  base-4.12.0.0:Control.Monad 54356f938d3817a0115f506fce4f2fa3
import  -/  base-4.12.0.0:Data.Either 3f22662ea029dfb63e64f318274cbbbd
import  -/  base-4.12.0.0:Data.Functor e667059569e58719cf8eee08191ebb1e
import  -/  base-4.12.0.0:Data.Monoid 6c9a55f5db4d603c7dc886429cfdb869
import  -/  base-4.12.0.0:GHC.Base fbe365a916ebeeeb4bc1f895dbe83e42
import  -/  base-4.12.0.0:GHC.Err 3a680f55541fe399f95f794018fc3593
import  -/  base-4.12.0.0:GHC.Show fa6032f3f820e8e8ec87b97bdca4e160
import  -/  base-4.12.0.0:Prelude 80c668cb99fbafebd524c5e897f8c982
import  -/  base-4.12.0.0:System.IO 51ffc52e2e8495d5c7b596557cf2be89
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  MinHS.Evaluator 2f09b099e2092af237072d2766f777aa
  exports: b0d337ae45bc2141a5441990db612ffa
  evaluate b1789fb753549f64cbef1f6585af6672
import  -/  MinHS.Parse 7f24a9e9cef383fc4fbaf8bdd5398dc2
  exports: 584fc76b75fcb5b8289001641ff2f257
  parseProgram 886f77f0b533a4f385ea5e4cad10e7e2
import  -/  MinHS.Pretty a2c3722adac4918b16523478ba7a5c35
  exports: 5d5d51f4eaa9036c0914f3fe56c0a240
import  -/  MinHS.Syntax a27359a8aa4022e86f719300174c8c96
  exports: d6deca1fbcb8bfd1f4cff4f1793e2d74
  Program abb774a32fac37ba934a5fb26a6980a8
import  -/  MinHS.TypeChecker 8d290bd2ac54d04e73bfafcf6b06e56c
  exports: b76cf8404cbfc0bb328a0cf2cf534554
  typecheck 55c344826501c0f05a6f769099881527
import  -/  optparse-applicative-0.14.3.0:Options.Applicative 7eff83c345cdb04a4dfec6322cf73e05
import  -/  optparse-applicative-0.14.3.0:Options.Applicative.Builder 80a215820059619a1c04c0dd06269fe3
import  -/  optparse-applicative-0.14.3.0:Options.Applicative.Extra 5486ad0bad11729663a217c7e9e0dc12
import  -/  optparse-applicative-0.14.3.0:Options.Applicative.Types a60253ec900323dd91bf704925ec8103
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
57ce94846abf2e8da3a1dbf69af763f5
  $w$sprinter ::
    (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
     -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
    -> MinHS.Syntax.Program -> (# GHC.Types.IO () #)
  {- Arity: 2, Strictness: <L,C(U)><L,U>, Inline: [2],
     Unfolding: (\ (w :: Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                   (w1 :: MinHS.Syntax.Program) ->
                 (# (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case Text.PrettyPrint.ANSI.Leijen.Internal.displayIO1
                            GHC.IO.Handle.FD.stdout
                            (Text.PrettyPrint.ANSI.Leijen.Internal.renderFits
                               Text.PrettyPrint.ANSI.Leijen.Internal.fits1
                               Text.PrettyPrint.ANSI.Leijen.Internal.$fShowDoc3
                               Text.PrettyPrint.ANSI.Leijen.Internal.$fShowDoc2
                               (w (MinHS.Pretty.$fPrettyBind_$cprettyList w1)))
                            s of ds1 { (#,#) ipv ipv1 ->
                     (GHC.IO.Handle.Text.hPutStr'
                        GHC.IO.Handle.FD.stdout
                        (GHC.Types.[] @ GHC.Types.Char)
                        GHC.Types.True)
                       `cast`
                     (GHC.Types.N:IO[0] <()>_R)
                       ipv })
                      `cast`
                    (Sym (GHC.Types.N:IO[0] <()>_R)) #)) -}
7fb580d8811c88ac0e8ac542d570fb5c
  type Action a b = a -> Data.Either.Either (GHC.Types.IO ()) b
e21e0526ff6976db28362d21a4359df4
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
120bc1fc23d2e5f769a8edacbc39264d
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 case Options.Applicative.Extra.customExecParser2
                        @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                            -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                           -> Main.Action GHC.Base.String (GHC.Types.IO ()),
                           Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                           -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc,
                           GHC.IO.FilePath)
                        (Options.Applicative.Extra.execParserPure
                           @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                               -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                              -> Main.Action GHC.Base.String (GHC.Types.IO ()),
                              Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                              -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc,
                              GHC.IO.FilePath)
                           Options.Applicative.Builder.defaultPrefs
                           Main.main2
                           ipv1)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { (,,) pipeline filter file ->
                 case GHC.IO.Handle.FD.openFile1
                        file
                        GHC.IO.IOMode.ReadMode
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv5
                        ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                 case pipeline filter ipv7 of wild1 {
                   Data.Either.Left x -> x `cast` (GHC.Types.N:IO[0] <()>_R) ipv6
                   Data.Either.Right y
                   -> y `cast` (GHC.Types.N:IO[0] <()>_R) ipv6 } } } } } }) -}
ffdb28ca24c432f05768f9bedb643f6e
  main10 :: Options.Applicative.Types.Parser GHC.IO.FilePath
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ GHC.IO.FilePath
                   Main.main11) -}
a06f97ed70213e0b35e1e03f13672b7a
  main11 :: Options.Applicative.Types.Option GHC.IO.FilePath
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ GHC.IO.FilePath
                   Main.main15
                   Main.main12) -}
e59bc6f4dcb3d8ac2333f8c15d561d74
  main12 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   (GHC.Maybe.Nothing @ Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Internal.Doc>_N)
                   Main.main13
                   (GHC.Maybe.Nothing @ GHC.Base.String)
                   (GHC.Maybe.Nothing
                      @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc))) -}
5e1640cdd13334e14e4358f430655631
  main13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main14) -}
04a7bd1d44e1bccd510fb133598a75be
  main14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FILE"#) -}
a5de8eeae663e8e9135aed07ac3c2602
  main15 :: Options.Applicative.Types.OptReader GHC.IO.FilePath
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Options.Applicative.Types.ArgReader
                   @ GHC.IO.FilePath
                   Main.main16) -}
ae9c653b058e83667a9bddb93674f580
  main16 :: Options.Applicative.Types.CReader GHC.IO.FilePath
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Options.Applicative.Types.CReader
                   @ GHC.IO.FilePath
                   Options.Applicative.Types.$fMonoidCompleter3
                     `cast`
                   ((<GHC.Base.String>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <[GHC.Base.String]>_R)) ; Sym (Options.Applicative.Types.N:Completer[0]))
                   (Data.Either.Right
                      @ Options.Applicative.Types.ParseError
                      @ GHC.IO.FilePath)
                     `cast`
                   ((<GHC.Base.String>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      Options.Applicative.Types.ParseError
                                      GHC.IO.FilePath>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                     <Options.Applicative.Types.ParseError>_N
                                                                     <Data.Functor.Identity.Identity>_R
                                                                     <GHC.IO.FilePath>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                       <GHC.Base.String>_R
                                                                                                       <Control.Monad.Trans.Except.Except
                                                                                                          Options.Applicative.Types.ParseError>_R
                                                                                                       <GHC.IO.FilePath>_N) ; Sym (Options.Applicative.Types.N:ReadM[0]) <GHC.IO.FilePath>_N))) -}
281321e86599d00416307e4c69888b37
  main17 ::
    Options.Applicative.Types.Parser
      (GHC.IO.FilePath
       -> ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
            -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
           -> Main.Action GHC.Base.String (GHC.Types.IO ()),
           Text.PrettyPrint.ANSI.Leijen.Internal.Doc
           -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc,
           GHC.IO.FilePath))
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ (GHC.IO.FilePath
                      -> ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                           -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                          -> Main.Action GHC.Base.String (GHC.Types.IO ()),
                          Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                          -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc,
                          GHC.IO.FilePath))
                   @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                      -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                   Main.main32
                   Main.main18) -}
60a038feba8ad7901bcfce454a74239e
  main18 ::
    Options.Applicative.Types.Parser
      (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                      -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                   Main.main21
                   Main.main19) -}
4abb32ca86ce3d60c440aaa50e26fd5c
  main19 ::
    Options.Applicative.Types.Parser
      (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Options.Applicative.Types.NilP
                   @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                      -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                   Main.main20) -}
c1962c80f4e09bec4d1175246e5376d0
  main2 ::
    Options.Applicative.Types.ParserInfo
      ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
        -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
       -> Main.Action GHC.Base.String (GHC.Types.IO ()),
       Text.PrettyPrint.ANSI.Leijen.Internal.Doc
       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc,
       GHC.IO.FilePath)
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.ParserInfo
                   @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      -> Main.Action GHC.Base.String (GHC.Types.IO ()),
                      Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                      -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc,
                      GHC.IO.FilePath)
                   Main.main7
                   GHC.Types.True
                   Main.main5
                   Main.main3
                   (GHC.Maybe.Nothing @ Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                     `cast`
                   (Sym (Options.Applicative.Help.Chunk.N:Chunk[0]) <Text.PrettyPrint.ANSI.Leijen.Internal.Doc>_N)
                   Options.Applicative.Builder.info1
                   Options.Applicative.Types.Intersperse) -}
bd6e2163cc26a548649de2f84bd84e19
  main20 ::
    GHC.Maybe.Maybe
      (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                      -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                   (GHC.Base.id @ Text.PrettyPrint.ANSI.Leijen.Internal.Doc)) -}
c5e3512634cfe8d2961f4e2c603d2ffb
  main21 ::
    Options.Applicative.Types.Parser
      (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                      -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                   Main.main22
                   (Options.Applicative.Types.$fAlternativeParser_$cempty
                      @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc))) -}
fe668502ac8bb9dc35c2caf6e54a51f9
  main22 ::
    Options.Applicative.Types.Parser
      (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                      -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                   Main.main23) -}
67679ad7c94741c091ea6a55c76e0cf9
  main23 ::
    Options.Applicative.Types.Option
      (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                      -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                   Main.main27
                   Main.main24) -}
fb4f5911086c169bf71d848326d16a45
  main24 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   Main.main25
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Maybe.Nothing @ GHC.Base.String)
                   (GHC.Maybe.Nothing
                      @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc))) -}
e5417f0fd803d09737c8570bb602d593
  main25 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Internal.Doc
  {- Unfolding: (Options.Applicative.Help.Chunk.paragraph_go
                   (GHC.CString.unpackCString# Main.main26)) -}
42860c9ca638fcbefa0cf10ec7c92b61
  main26 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("do not use colour when pretty printing"#) -}
7f25355253b84529fe377162be3ca7aa
  main27 ::
    Options.Applicative.Types.OptReader
      (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.FlagReader
                   @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                      -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                   Main.main28
                   Text.PrettyPrint.ANSI.Leijen.Internal.plain) -}
7201fc61a9988aec040cfe132c41ba46
  main28 :: [Options.Applicative.Types.OptName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   Main.main29
                   (GHC.Types.[] @ Options.Applicative.Types.OptName)) -}
b477f993ac5f85aa1b11a4c82314b735
  main29 :: Options.Applicative.Types.OptName
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptLong Main.main30) -}
d1014b140d7993491d66e09bf782fb5c
  main3 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Internal.Doc
  {- Unfolding: (Options.Applicative.Help.Chunk.paragraph_go
                   (GHC.CString.unpackCString# Main.main4)) -}
291da99c64aa1d3bbbb24c780d5584ec
  main30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main31) -}
fe2b7e40319c343f90410c67a9427061
  main31 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("no-colour"#) -}
8fb553d3e24d99627e33ae0d648a1472
  main32 ::
    Options.Applicative.Types.Parser
      ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
        -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
       -> GHC.IO.FilePath
       -> ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
            -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
           -> Main.Action GHC.Base.String (GHC.Types.IO ()),
           Text.PrettyPrint.ANSI.Leijen.Internal.Doc
           -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc,
           GHC.IO.FilePath))
  {- Unfolding: (Options.Applicative.Types.$fApplicativeParser_$cfmap
                   @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      -> Main.Action GHC.Base.String (GHC.Types.IO ()))
                   @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      -> GHC.IO.FilePath
                      -> ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                           -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                          -> Main.Action GHC.Base.String (GHC.Types.IO ()),
                          Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                          -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc,
                          GHC.IO.FilePath))
                   (GHC.Tuple.(,,)
                      @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                          -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                         -> Main.Action GHC.Base.String (GHC.Types.IO ()))
                      @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      @ GHC.IO.FilePath)
                   Main.main33) -}
dfb49afae78d2d657b1bc5cb9e00556e
  main33 ::
    Options.Applicative.Types.Parser
      ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
        -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
       -> Main.Action GHC.Base.String (GHC.Types.IO ()))
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      -> Main.Action GHC.Base.String (GHC.Types.IO ()))
                   Main.main37
                   Main.main34) -}
7d02ecafc2d1a6abd044e772a7969294
  main34 ::
    Options.Applicative.Types.Parser
      ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
        -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
       -> Main.Action GHC.Base.String (GHC.Types.IO ()))
  {- Strictness: m1,
     Unfolding: (Options.Applicative.Types.NilP
                   @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      -> Main.Action GHC.Base.String (GHC.Types.IO ()))
                   Main.main35) -}
8b883c6a4ddaf1327855847311601714
  main35 ::
    GHC.Maybe.Maybe
      ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
        -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
       -> Main.Action GHC.Base.String (GHC.Types.IO ()))
  {- Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      -> Main.Action GHC.Base.String (GHC.Types.IO ()))
                   Main.main_evaluatorAction) -}
122f1f1adce53b3652a64411d721e037
  main36 :: Text.Parsec.Pos.SourcePos
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Text.Parsec.Pos.SourcePos
                   (GHC.Types.[] @ GHC.Types.Char)
                   1#
                   1#) -}
a733f1b5a2f4aad645cca52937fcec00
  main37 ::
    Options.Applicative.Types.Parser
      ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
        -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
       -> Main.Action GHC.Base.String (GHC.Types.IO ()))
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      -> Main.Action GHC.Base.String (GHC.Types.IO ()))
                   Main.main38) -}
49be35d787ebd061cd980beb72df3bbd
  main38 ::
    Options.Applicative.Types.Option
      ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
        -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
       -> Main.Action GHC.Base.String (GHC.Types.IO ()))
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      -> Main.Action GHC.Base.String (GHC.Types.IO ()))
                   Main.main44
                   Main.main39) -}
a84130206227a0221dcd8d9c64c81b65
  main39 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   Main.main42
                   Main.main40
                   (GHC.Maybe.Nothing @ GHC.Base.String)
                   (GHC.Maybe.Nothing
                      @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc))) -}
d68aa686be2d206948d3e9e967de2cee
  main4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("MinHS - Concepts of Program Design"#) -}
7e7bdd54eb4446c4018a3d1a717ad0cb
  main40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main41) -}
fd75aaef0f1fab7517aa5ffbc1ad2093
  main41 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("STAGE"#) -}
00793052d7c7f31eb1b4c07fc30f7247
  main42 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Internal.Doc
  {- Unfolding: (Options.Applicative.Help.Chunk.paragraph_go
                   (GHC.CString.unpackCString# Main.main43)) -}
c9ff9098547d556488697ad827e6c3d6
  main43 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("stage after which to dump the current state. \n\
                 \                           [parser,parser-raw,typechecker,evaluator]"#) -}
ead7531ad4dc042160a1e261dd343413
  main44 ::
    Options.Applicative.Types.OptReader
      ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
        -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
       -> Main.Action GHC.Base.String (GHC.Types.IO ()))
  {- Strictness: m1,
     Unfolding: (Options.Applicative.Types.OptReader
                   @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      -> Main.Action GHC.Base.String (GHC.Types.IO ()))
                   Main.main63
                   Main.main45
                   Options.Applicative.Types.ExpectsArgError) -}
eccaab3e2cffc62608fff49e7d8ada88
  main45 ::
    Options.Applicative.Types.CReader
      ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
        -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
       -> Main.Action GHC.Base.String (GHC.Types.IO ()))
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.CReader
                   @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      -> Main.Action GHC.Base.String (GHC.Types.IO ()))
                   Options.Applicative.Types.$fMonoidCompleter3
                     `cast`
                   ((<GHC.Base.String>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <[GHC.Base.String]>_R)) ; Sym (Options.Applicative.Types.N:Completer[0]))
                   Main.main46
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <GHC.Base.String>_R
                             <Control.Monad.Trans.Except.Except
                                Options.Applicative.Types.ParseError>_R
                             <(Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                               -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                              -> GHC.Base.String
                              -> Data.Either.Either
                                   (GHC.Types.IO ())
                                   (GHC.Types.IO
                                      ())>_N) ; Sym (Options.Applicative.Types.N:ReadM[0]) <(Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                                                                                             -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                                                                                            -> GHC.Base.String
                                                                                            -> Data.Either.Either
                                                                                                 (GHC.Types.IO
                                                                                                    ())
                                                                                                 (GHC.Types.IO
                                                                                                    ())>_N)) -}
877d4188732ac83ee259453aa65bfa60
  main46 ::
    GHC.Base.String
    -> Control.Monad.Trans.Except.ExceptT
         Options.Applicative.Types.ParseError
         Data.Functor.Identity.Identity
         ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
           -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
          -> GHC.Base.String
          -> Data.Either.Either (GHC.Types.IO ()) (GHC.Types.IO ()))
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Base.String) ->
                 case GHC.Base.eqString eta Main.main61 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString eta Main.main59 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString eta Main.main57 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString eta Main.main55 of wild3 {
                                  GHC.Types.False
                                  -> Main.main54
                                       `cast`
                                     (Nth:3
                                          (<[GHC.Types.Char]>_R
                                           ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                                         <Data.Either.Either
                                                            Options.Applicative.Types.ParseError
                                                            ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                                                              -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                                                             -> GHC.Base.String
                                                             -> Data.Either.Either
                                                                  (GHC.Types.IO ())
                                                                  (GHC.Types.IO
                                                                     ()))>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                         <Options.Applicative.Types.ParseError>_N
                                                                                         <Data.Functor.Identity.Identity>_R
                                                                                         <(Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                                                                                           -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                                                                                          -> GHC.Base.String
                                                                                          -> Data.Either.Either
                                                                                               (GHC.Types.IO
                                                                                                  ())
                                                                                               (GHC.Types.IO
                                                                                                  ())>_N)))
                                  GHC.Types.True
                                  -> Main.main52
                                       `cast`
                                     (Nth:3
                                          (<[GHC.Types.Char]>_R
                                           ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                                         <Data.Either.Either
                                                            Options.Applicative.Types.ParseError
                                                            ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                                                              -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                                                             -> GHC.Base.String
                                                             -> Data.Either.Either
                                                                  (GHC.Types.IO ())
                                                                  (GHC.Types.IO
                                                                     ()))>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                         <Options.Applicative.Types.ParseError>_N
                                                                                         <Data.Functor.Identity.Identity>_R
                                                                                         <(Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                                                                                           -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                                                                                          -> GHC.Base.String
                                                                                          -> Data.Either.Either
                                                                                               (GHC.Types.IO
                                                                                                  ())
                                                                                               (GHC.Types.IO
                                                                                                  ())>_N))) }
                             GHC.Types.True
                             -> Main.main50
                                  `cast`
                                (Nth:3
                                     (<[GHC.Types.Char]>_R
                                      ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                                    <Data.Either.Either
                                                       Options.Applicative.Types.ParseError
                                                       ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                                                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                                                        -> GHC.Base.String
                                                        -> Data.Either.Either
                                                             (GHC.Types.IO ())
                                                             (GHC.Types.IO
                                                                ()))>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                    <Options.Applicative.Types.ParseError>_N
                                                                                    <Data.Functor.Identity.Identity>_R
                                                                                    <(Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                                                                                      -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                                                                                     -> GHC.Base.String
                                                                                     -> Data.Either.Either
                                                                                          (GHC.Types.IO
                                                                                             ())
                                                                                          (GHC.Types.IO
                                                                                             ())>_N))) }
                        GHC.Types.True
                        -> Main.main48
                             `cast`
                           (Nth:3
                                (<[GHC.Types.Char]>_R
                                 ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                               <Data.Either.Either
                                                  Options.Applicative.Types.ParseError
                                                  ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                                                    -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                                                   -> GHC.Base.String
                                                   -> Data.Either.Either
                                                        (GHC.Types.IO ())
                                                        (GHC.Types.IO
                                                           ()))>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                               <Options.Applicative.Types.ParseError>_N
                                                                               <Data.Functor.Identity.Identity>_R
                                                                               <(Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                                                                                 -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                                                                                -> GHC.Base.String
                                                                                -> Data.Either.Either
                                                                                     (GHC.Types.IO
                                                                                        ())
                                                                                     (GHC.Types.IO
                                                                                        ())>_N))) }
                   GHC.Types.True
                   -> Main.main47
                        `cast`
                      (Nth:3
                           (<[GHC.Types.Char]>_R
                            ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                          <Data.Either.Either
                                             Options.Applicative.Types.ParseError
                                             ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                                               -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                                              -> Main.Action
                                                   GHC.Base.String
                                                   (GHC.Types.IO
                                                      ()))>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                          <Options.Applicative.Types.ParseError>_N
                                                                          <Data.Functor.Identity.Identity>_R
                                                                          <(Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                                                                            -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                                                                           -> Main.Action
                                                                                GHC.Base.String
                                                                                (GHC.Types.IO
                                                                                   ())>_N))) }) -}
79b7047ab8a4436a1885d42fd6e4665e
  main47 ::
    Data.Either.Either
      Options.Applicative.Types.ParseError
      ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
        -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
       -> Main.Action GHC.Base.String (GHC.Types.IO ()))
  {- Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ Options.Applicative.Types.ParseError
                   @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      -> Main.Action GHC.Base.String (GHC.Types.IO ()))
                   Main.main_evaluatorAction) -}
86db9bfbc0e21f6d4d942fa0a22c7988
  main48 ::
    Data.Either.Either
      Options.Applicative.Types.ParseError
      ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
        -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
       -> GHC.Base.String
       -> Data.Either.Either (GHC.Types.IO ()) (GHC.Types.IO ()))
  {- Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ Options.Applicative.Types.ParseError
                   @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      -> GHC.Base.String
                      -> Data.Either.Either (GHC.Types.IO ()) (GHC.Types.IO ()))
                   Main.main49) -}
1d24aa3c5303091653be9dcdfbae5a2c
  main49 ::
    (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
     -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
    -> GHC.Base.String
    -> Data.Either.Either (GHC.Types.IO ()) (GHC.Types.IO ())
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: (\ (f :: Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                   (eta :: GHC.Base.String) ->
                 case MinHS.Parse.angles1
                        @ () of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 case (ds15
                         `cast`
                       (Text.Parsec.Prim.N:ParsecT[0]
                            <[GHC.Types.Char]>_R
                            <()>_R
                            <Data.Functor.Identity.Identity>_R
                            <()>_R)
                         @ (Text.Parsec.Prim.Consumed
                              (Data.Functor.Identity.Identity
                                 (Text.Parsec.Prim.Reply GHC.Base.String () [MinHS.Syntax.Bind])))
                         (Text.Parsec.Prim.State
                            @ GHC.Base.String
                            @ ()
                            eta
                            Main.main36
                            GHC.Tuple.())
                         MinHS.Parse.parseProgram7
                         MinHS.Parse.parseProgram4
                           `cast`
                         (<Text.Parsec.Error.ParseError>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Parsec.Prim.Consumed
                                           (Data.Functor.Identity.Identity
                                              (Text.Parsec.Prim.Reply
                                                 GHC.Base.String () [MinHS.Syntax.Bind]))>_R))
                         MinHS.Parse.parseProgram3
                         MinHS.Parse.parseProgram2
                           `cast`
                         (<Text.Parsec.Error.ParseError>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Parsec.Prim.Consumed
                                           (Data.Functor.Identity.Identity
                                              (Text.Parsec.Prim.Reply
                                                 GHC.Base.String () [MinHS.Syntax.Bind]))>_R)))
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Text.Parsec.Prim.Consumed
                              (Data.Functor.Identity.Identity
                                 (Text.Parsec.Prim.Reply
                                    GHC.Base.String () [MinHS.Syntax.Bind]))>_R) of wild1 {
                   Text.Parsec.Prim.Consumed r
                   -> case r `cast`
                           (Data.Functor.Identity.N:Identity[0]
                                <Text.Parsec.Prim.Reply
                                   GHC.Base.String () [MinHS.Syntax.Bind]>_R) of wild2 {
                        Text.Parsec.Prim.Ok x9 ds29 ds30 -> Main.main_$sprinter f x9
                        Text.Parsec.Prim.Error err
                        -> Data.Either.Left
                             @ (GHC.Types.IO ())
                             @ (GHC.Types.IO ())
                             (GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout
                                (Text.Parsec.Error.$fShowParseError_$cshow err)
                                GHC.Types.True) }
                   Text.Parsec.Prim.Empty r
                   -> case r `cast`
                           (Data.Functor.Identity.N:Identity[0]
                                <Text.Parsec.Prim.Reply
                                   GHC.Base.String () [MinHS.Syntax.Bind]>_R) of wild2 {
                        Text.Parsec.Prim.Ok x9 ds29 ds30 -> Main.main_$sprinter f x9
                        Text.Parsec.Prim.Error err
                        -> Data.Either.Left
                             @ (GHC.Types.IO ())
                             @ (GHC.Types.IO ())
                             (GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout
                                (Text.Parsec.Error.$fShowParseError_$cshow err)
                                GHC.Types.True) } } }) -}
6281bf627bfe13ca9020acda3757e1f2
  main5 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Internal.Doc
  {- Unfolding: (Options.Applicative.Help.Chunk.paragraph_go
                   (GHC.CString.unpackCString# Main.main6)) -}
e3ff0e83be7aa4e07783d9fafbf199ae
  main50 ::
    Data.Either.Either
      Options.Applicative.Types.ParseError
      ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
        -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
       -> GHC.Base.String
       -> Data.Either.Either (GHC.Types.IO ()) (GHC.Types.IO ()))
  {- Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ Options.Applicative.Types.ParseError
                   @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      -> GHC.Base.String
                      -> Data.Either.Either (GHC.Types.IO ()) (GHC.Types.IO ()))
                   Main.main51) -}
d89790070aa57941f9d309f6de35e625
  main51 ::
    (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
     -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
    -> GHC.Base.String
    -> Data.Either.Either (GHC.Types.IO ()) (GHC.Types.IO ())
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: (\ (f :: Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                   (eta :: GHC.Base.String) ->
                 case MinHS.Parse.angles1
                        @ () of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 case (ds15
                         `cast`
                       (Text.Parsec.Prim.N:ParsecT[0]
                            <[GHC.Types.Char]>_R
                            <()>_R
                            <Data.Functor.Identity.Identity>_R
                            <()>_R)
                         @ (Text.Parsec.Prim.Consumed
                              (Data.Functor.Identity.Identity
                                 (Text.Parsec.Prim.Reply GHC.Base.String () [MinHS.Syntax.Bind])))
                         (Text.Parsec.Prim.State
                            @ GHC.Base.String
                            @ ()
                            eta
                            Main.main36
                            GHC.Tuple.())
                         MinHS.Parse.parseProgram7
                         MinHS.Parse.parseProgram4
                           `cast`
                         (<Text.Parsec.Error.ParseError>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Parsec.Prim.Consumed
                                           (Data.Functor.Identity.Identity
                                              (Text.Parsec.Prim.Reply
                                                 GHC.Base.String () [MinHS.Syntax.Bind]))>_R))
                         MinHS.Parse.parseProgram3
                         MinHS.Parse.parseProgram2
                           `cast`
                         (<Text.Parsec.Error.ParseError>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Parsec.Prim.Consumed
                                           (Data.Functor.Identity.Identity
                                              (Text.Parsec.Prim.Reply
                                                 GHC.Base.String () [MinHS.Syntax.Bind]))>_R)))
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Text.Parsec.Prim.Consumed
                              (Data.Functor.Identity.Identity
                                 (Text.Parsec.Prim.Reply
                                    GHC.Base.String () [MinHS.Syntax.Bind]))>_R) of wild1 {
                   Text.Parsec.Prim.Consumed r
                   -> case r `cast`
                           (Data.Functor.Identity.N:Identity[0]
                                <Text.Parsec.Prim.Reply
                                   GHC.Base.String () [MinHS.Syntax.Bind]>_R) of wild2 {
                        Text.Parsec.Prim.Ok x9 ds29 ds30
                        -> Data.Either.Right
                             @ (GHC.Types.IO ())
                             @ (GHC.Types.IO ())
                             (GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout
                                (GHC.Show.showList__
                                   @ MinHS.Syntax.Bind
                                   MinHS.Syntax.$fShowBind1
                                   x9
                                   (GHC.Types.[] @ GHC.Types.Char))
                                GHC.Types.True)
                        Text.Parsec.Prim.Error err
                        -> Data.Either.Left
                             @ (GHC.Types.IO ())
                             @ (GHC.Types.IO ())
                             (GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout
                                (Text.Parsec.Error.$fShowParseError_$cshow err)
                                GHC.Types.True) }
                   Text.Parsec.Prim.Empty r
                   -> case r `cast`
                           (Data.Functor.Identity.N:Identity[0]
                                <Text.Parsec.Prim.Reply
                                   GHC.Base.String () [MinHS.Syntax.Bind]>_R) of wild2 {
                        Text.Parsec.Prim.Ok x9 ds29 ds30
                        -> Data.Either.Right
                             @ (GHC.Types.IO ())
                             @ (GHC.Types.IO ())
                             (GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout
                                (GHC.Show.showList__
                                   @ MinHS.Syntax.Bind
                                   MinHS.Syntax.$fShowBind1
                                   x9
                                   (GHC.Types.[] @ GHC.Types.Char))
                                GHC.Types.True)
                        Text.Parsec.Prim.Error err
                        -> Data.Either.Left
                             @ (GHC.Types.IO ())
                             @ (GHC.Types.IO ())
                             (GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout
                                (Text.Parsec.Error.$fShowParseError_$cshow err)
                                GHC.Types.True) } } }) -}
4a354760a1f527b7a412adf67f147f5b
  main52 ::
    Data.Either.Either
      Options.Applicative.Types.ParseError
      ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
        -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
       -> GHC.Base.String
       -> Data.Either.Either (GHC.Types.IO ()) (GHC.Types.IO ()))
  {- Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ Options.Applicative.Types.ParseError
                   @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      -> GHC.Base.String
                      -> Data.Either.Either (GHC.Types.IO ()) (GHC.Types.IO ()))
                   Main.main53) -}
e9db2be0a5a36bf5adb0632ab30591e2
  main53 ::
    (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
     -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
    -> GHC.Base.String
    -> Data.Either.Either (GHC.Types.IO ()) (GHC.Types.IO ())
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: (\ (f :: Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                   (eta :: GHC.Base.String) ->
                 case MinHS.Parse.angles1
                        @ () of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 let {
                   $j :: MinHS.Syntax.Program
                         -> Data.Either.Either (GHC.Types.IO ()) (GHC.Types.IO ())
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (r :: MinHS.Syntax.Program)[OneShot] ->
                     case Main.main_typechecker f r of wild1 {
                       Data.Either.Left l
                       -> Data.Either.Left @ (GHC.Types.IO ()) @ (GHC.Types.IO ()) l
                       Data.Either.Right r1 -> Main.main_$sprinter f r1 }
                 } in
                 case (ds15
                         `cast`
                       (Text.Parsec.Prim.N:ParsecT[0]
                            <[GHC.Types.Char]>_R
                            <()>_R
                            <Data.Functor.Identity.Identity>_R
                            <()>_R)
                         @ (Text.Parsec.Prim.Consumed
                              (Data.Functor.Identity.Identity
                                 (Text.Parsec.Prim.Reply GHC.Base.String () [MinHS.Syntax.Bind])))
                         (Text.Parsec.Prim.State
                            @ GHC.Base.String
                            @ ()
                            eta
                            Main.main36
                            GHC.Tuple.())
                         MinHS.Parse.parseProgram7
                         MinHS.Parse.parseProgram4
                           `cast`
                         (<Text.Parsec.Error.ParseError>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Parsec.Prim.Consumed
                                           (Data.Functor.Identity.Identity
                                              (Text.Parsec.Prim.Reply
                                                 GHC.Base.String () [MinHS.Syntax.Bind]))>_R))
                         MinHS.Parse.parseProgram3
                         MinHS.Parse.parseProgram2
                           `cast`
                         (<Text.Parsec.Error.ParseError>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Parsec.Prim.Consumed
                                           (Data.Functor.Identity.Identity
                                              (Text.Parsec.Prim.Reply
                                                 GHC.Base.String () [MinHS.Syntax.Bind]))>_R)))
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Text.Parsec.Prim.Consumed
                              (Data.Functor.Identity.Identity
                                 (Text.Parsec.Prim.Reply
                                    GHC.Base.String () [MinHS.Syntax.Bind]))>_R) of wild1 {
                   Text.Parsec.Prim.Consumed r
                   -> case r `cast`
                           (Data.Functor.Identity.N:Identity[0]
                                <Text.Parsec.Prim.Reply
                                   GHC.Base.String () [MinHS.Syntax.Bind]>_R) of wild2 {
                        Text.Parsec.Prim.Ok x9 ds29 ds30 -> $j x9
                        Text.Parsec.Prim.Error err
                        -> Data.Either.Left
                             @ (GHC.Types.IO ())
                             @ (GHC.Types.IO ())
                             (GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout
                                (Text.Parsec.Error.$fShowParseError_$cshow err)
                                GHC.Types.True) }
                   Text.Parsec.Prim.Empty r
                   -> case r `cast`
                           (Data.Functor.Identity.N:Identity[0]
                                <Text.Parsec.Prim.Reply
                                   GHC.Base.String () [MinHS.Syntax.Bind]>_R) of wild2 {
                        Text.Parsec.Prim.Ok x9 ds29 ds30 -> $j x9
                        Text.Parsec.Prim.Error err
                        -> Data.Either.Left
                             @ (GHC.Types.IO ())
                             @ (GHC.Types.IO ())
                             (GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout
                                (Text.Parsec.Error.$fShowParseError_$cshow err)
                                GHC.Types.True) } } }) -}
f5928a392fe371b2b5273c3697f974e7
  main54 ::
    Data.Either.Either
      Options.Applicative.Types.ParseError
      ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
        -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
       -> GHC.Base.String
       -> Data.Either.Either (GHC.Types.IO ()) (GHC.Types.IO ()))
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ Options.Applicative.Types.ParseError
                   @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      -> GHC.Base.String
                      -> Data.Either.Either (GHC.Types.IO ()) (GHC.Types.IO ()))
                   Options.Applicative.Types.ShowHelpText) -}
820663a1616047e7c11a902faef04407
  main55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main56) -}
e33b0969a78b8d9723a1ddb879a9c25d
  main56 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("typechecker"#) -}
0d9d9b37e5ebd2b3c4cf795733fdf47e
  main57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main58) -}
65e6701e7e819b2730a0432d78e054c0
  main58 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("parser-raw"#) -}
9d899fe02c340981da2917f9878bac0f
  main59 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main60) -}
4d99aa2c485a5189983dd143f158083c
  main6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("A interpreter for a small functional language"#) -}
d4ad3a799f0d5bc2ca5ee189c1e61769
  main60 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("parser"#) -}
41b2d88c7fab369a64995412c5b70bd5
  main61 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main62) -}
1695c38ce8c80c1ecb57f8d5726d55b0
  main62 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("evaluator"#) -}
4b9761007822b1acdd1c2c49f057d8b3
  main63 :: [Options.Applicative.Types.OptName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   Main.main64
                   (GHC.Types.[] @ Options.Applicative.Types.OptName)) -}
4115fd15fe5f7976570fdcb8f86a718e
  main64 :: Options.Applicative.Types.OptName
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptLong Main.main65) -}
cb23642e99f5b7ad6d113d5ad380037e
  main65 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main66) -}
d61a4313ed46694d524ea5504882c065
  main66 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("dump"#) -}
39d366b1d73d49e79b0c3cdee7a32336
  main67 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
7394ad03604fb4771d53a4859ffb6ae0
  main7 ::
    Options.Applicative.Types.Parser
      ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
        -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
       -> Main.Action GHC.Base.String (GHC.Types.IO ()),
       Text.PrettyPrint.ANSI.Leijen.Internal.Doc
       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc,
       GHC.IO.FilePath)
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      -> Main.Action GHC.Base.String (GHC.Types.IO ()),
                      Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                      -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc,
                      GHC.IO.FilePath)
                   @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      -> Main.Action GHC.Base.String (GHC.Types.IO ()),
                      Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                      -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc,
                      GHC.IO.FilePath)
                   (Options.Applicative.Extra.helper
                      @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                          -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                         -> Main.Action GHC.Base.String (GHC.Types.IO ()),
                         Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc,
                         GHC.IO.FilePath))
                   Main.main8) -}
ec22b5bd597f1f4d5117773958a85d45
  main8 ::
    Options.Applicative.Types.Parser
      ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
        -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
       -> Main.Action GHC.Base.String (GHC.Types.IO ()),
       Text.PrettyPrint.ANSI.Leijen.Internal.Doc
       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc,
       GHC.IO.FilePath)
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ ((Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                       -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                      -> Main.Action GHC.Base.String (GHC.Types.IO ()),
                      Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                      -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc,
                      GHC.IO.FilePath)
                   @ GHC.IO.FilePath
                   Main.main17
                   Main.main9) -}
bcfb2df073e3db70e1acd2393ad8e1da
  main9 :: Options.Applicative.Types.Parser GHC.IO.FilePath
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.IO.FilePath
                   Main.main10
                   (Options.Applicative.Types.$fAlternativeParser_$cempty
                      @ GHC.IO.FilePath)) -}
a159cf654de3ae19a00b40fc982d2f58
  main_$sprinter ::
    (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
     -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
    -> Main.Action MinHS.Syntax.Program (GHC.Types.IO ())
  {- Arity: 2, Strictness: <L,C(U)><L,U>m2, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                   (w1 :: MinHS.Syntax.Program) ->
                 case Main.$w$sprinter w w1 of ww { Unit# ww1 ->
                 Data.Either.Right @ (GHC.Types.IO ()) @ (GHC.Types.IO ()) ww1 }) -}
e4c2b94a8dac3e0ff9481f65c0450d2e
  main_evaluatorAction ::
    (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
     -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
    -> Main.Action GHC.Base.String (GHC.Types.IO ())
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: (\ (f :: Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                   (eta :: GHC.Base.String) ->
                 case MinHS.Parse.angles1
                        @ () of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 let {
                   $j :: MinHS.Syntax.Program
                         -> Data.Either.Either (GHC.Types.IO ()) (GHC.Types.IO ())
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (r :: MinHS.Syntax.Program)[OneShot] ->
                     case Main.main_typechecker f r of wild1 {
                       Data.Either.Left l
                       -> Data.Either.Left @ (GHC.Types.IO ()) @ (GHC.Types.IO ()) l
                       Data.Either.Right r1
                       -> Data.Either.Right
                            @ (GHC.Types.IO ())
                            @ (GHC.Types.IO ())
                            (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                             case Text.PrettyPrint.ANSI.Leijen.Internal.displayIO1
                                    GHC.IO.Handle.FD.stdout
                                    (Text.PrettyPrint.ANSI.Leijen.Internal.renderFits
                                       Text.PrettyPrint.ANSI.Leijen.Internal.fits1
                                       Text.PrettyPrint.ANSI.Leijen.Internal.$fShowDoc3
                                       Text.PrettyPrint.ANSI.Leijen.Internal.$fShowDoc2
                                       (f (MinHS.Evaluator.$fPrettyValue_$cpretty
                                             (MinHS.Evaluator.evaluate r1))))
                                    s of ds29 { (#,#) ipv ipv1 ->
                             (GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout
                                (GHC.Types.[] @ GHC.Types.Char)
                                GHC.Types.True)
                               `cast`
                             (GHC.Types.N:IO[0] <()>_R)
                               ipv })
                              `cast`
                            (Sym (GHC.Types.N:IO[0] <()>_R)) }
                 } in
                 case (ds15
                         `cast`
                       (Text.Parsec.Prim.N:ParsecT[0]
                            <[GHC.Types.Char]>_R
                            <()>_R
                            <Data.Functor.Identity.Identity>_R
                            <()>_R)
                         @ (Text.Parsec.Prim.Consumed
                              (Data.Functor.Identity.Identity
                                 (Text.Parsec.Prim.Reply GHC.Base.String () [MinHS.Syntax.Bind])))
                         (Text.Parsec.Prim.State
                            @ GHC.Base.String
                            @ ()
                            eta
                            Main.main36
                            GHC.Tuple.())
                         MinHS.Parse.parseProgram7
                         MinHS.Parse.parseProgram4
                           `cast`
                         (<Text.Parsec.Error.ParseError>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Parsec.Prim.Consumed
                                           (Data.Functor.Identity.Identity
                                              (Text.Parsec.Prim.Reply
                                                 GHC.Base.String () [MinHS.Syntax.Bind]))>_R))
                         MinHS.Parse.parseProgram3
                         MinHS.Parse.parseProgram2
                           `cast`
                         (<Text.Parsec.Error.ParseError>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Parsec.Prim.Consumed
                                           (Data.Functor.Identity.Identity
                                              (Text.Parsec.Prim.Reply
                                                 GHC.Base.String () [MinHS.Syntax.Bind]))>_R)))
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Text.Parsec.Prim.Consumed
                              (Data.Functor.Identity.Identity
                                 (Text.Parsec.Prim.Reply
                                    GHC.Base.String () [MinHS.Syntax.Bind]))>_R) of wild1 {
                   Text.Parsec.Prim.Consumed r
                   -> case r `cast`
                           (Data.Functor.Identity.N:Identity[0]
                                <Text.Parsec.Prim.Reply
                                   GHC.Base.String () [MinHS.Syntax.Bind]>_R) of wild2 {
                        Text.Parsec.Prim.Ok x9 ds29 ds30 -> $j x9
                        Text.Parsec.Prim.Error err
                        -> Data.Either.Left
                             @ (GHC.Types.IO ())
                             @ (GHC.Types.IO ())
                             (GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout
                                (Text.Parsec.Error.$fShowParseError_$cshow err)
                                GHC.Types.True) }
                   Text.Parsec.Prim.Empty r
                   -> case r `cast`
                           (Data.Functor.Identity.N:Identity[0]
                                <Text.Parsec.Prim.Reply
                                   GHC.Base.String () [MinHS.Syntax.Bind]>_R) of wild2 {
                        Text.Parsec.Prim.Ok x9 ds29 ds30 -> $j x9
                        Text.Parsec.Prim.Error err
                        -> Data.Either.Left
                             @ (GHC.Types.IO ())
                             @ (GHC.Types.IO ())
                             (GHC.IO.Handle.Text.hPutStr'
                                GHC.IO.Handle.FD.stdout
                                (Text.Parsec.Error.$fShowParseError_$cshow err)
                                GHC.Types.True) } } }) -}
bf4abd71683852d00b75d10e506d5947
  main_typechecker ::
    (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
     -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
    -> Main.Action MinHS.Syntax.Program MinHS.Syntax.Program
  {- Arity: 2, Strictness: <L,C(U)><S,U>,
     Unfolding: (\ (f :: Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc)
                   (p :: MinHS.Syntax.Program) ->
                 case (MinHS.TypeChecker.checkBinds
                         (Data.Map.Internal.Tip @ GHC.Base.String @ MinHS.Syntax.Type)
                           `cast`
                         (Sym (MinHS.Env.N:Env[0]) <MinHS.Syntax.Type>_N)
                         p)
                        `cast`
                      (MinHS.TypeChecker.N:TC[0] <MinHS.TypeChecker.Gamma>_N) of wild {
                   Data.Either.Left x1
                   -> Data.Either.Left
                        @ (GHC.Types.IO ())
                        @ MinHS.Syntax.Program
                        (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case Text.PrettyPrint.ANSI.Leijen.Internal.displayIO1
                                GHC.IO.Handle.FD.stdout
                                (Text.PrettyPrint.ANSI.Leijen.Internal.renderFits
                                   Text.PrettyPrint.ANSI.Leijen.Internal.fits1
                                   Text.PrettyPrint.ANSI.Leijen.Internal.$fShowDoc3
                                   Text.PrettyPrint.ANSI.Leijen.Internal.$fShowDoc2
                                   (f (MinHS.Pretty.$fPrettyTypeError_$cpretty x1)))
                                s of ds1 { (#,#) ipv ipv1 ->
                         (GHC.IO.Handle.Text.hPutStr'
                            GHC.IO.Handle.FD.stdout
                            (GHC.Types.[] @ GHC.Types.Char)
                            GHC.Types.True)
                           `cast`
                         (GHC.Types.N:IO[0] <()>_R)
                           ipv })
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R))
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ (GHC.Types.IO ())
                        @ MinHS.Syntax.Program
                        p }) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

