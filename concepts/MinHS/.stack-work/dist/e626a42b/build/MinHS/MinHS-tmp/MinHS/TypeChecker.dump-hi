
==================== FINAL INTERFACE ====================
2019-12-08 00:34:33.3930245 UTC

interface main:MinHS.TypeChecker 8065
  interface hash: 3ad91416e02b26fd1dee6bab131cb02a
  ABI hash: 8d290bd2ac54d04e73bfafcf6b06e56c
  export-list hash: b76cf8404cbfc0bb328a0cf2cf534554
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: befce0178425916de603071989b6eb33
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  MinHS.TypeChecker.checkAbs
  MinHS.TypeChecker.checkBind
  MinHS.TypeChecker.checkBinds
  MinHS.TypeChecker.checkBinds'
  MinHS.TypeChecker.checkExp
  MinHS.TypeChecker.constructorType
  MinHS.TypeChecker.initialGamma
  MinHS.TypeChecker.ofKind
  MinHS.TypeChecker.primOpType
  MinHS.TypeChecker.runTC
  MinHS.TypeChecker.shouldCheck
  MinHS.TypeChecker.tyConKind
  MinHS.TypeChecker.typeError
  MinHS.TypeChecker.typeWellformed
  MinHS.TypeChecker.typecheck
  MinHS.TypeChecker.Gamma
  MinHS.TypeChecker.Kind{MinHS.TypeChecker.:=> MinHS.TypeChecker.Star}
  MinHS.TypeChecker.TC{MinHS.TypeChecker.TC}
  MinHS.TypeChecker.TypeError{MinHS.TypeChecker.FunctionTypeExpected MinHS.TypeChecker.KindMismatch MinHS.TypeChecker.NoSuchConstructor MinHS.TypeChecker.NoSuchVariable MinHS.TypeChecker.TypeConstructorSaturated MinHS.TypeChecker.TypeMismatch MinHS.TypeChecker.TypeShouldBeFunction}
module dependencies: MinHS.Env MinHS.Syntax
package dependencies: array-0.5.3.0 base-4.12.0.0
                      containers-0.6.0.1 deepseq-1.4.4.0 ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Set.Internal
import  -/  base-4.12.0.0:Control.Applicative 5d23933516d8709a12bd090130e91420
import  -/  base-4.12.0.0:Control.Monad 54356f938d3817a0115f506fce4f2fa3
import  -/  base-4.12.0.0:Control.Monad.Fail c64f190b35ae6c4f0b40346f950ba992
import  -/  base-4.12.0.0:Data.Either 3f22662ea029dfb63e64f318274cbbbd
import  -/  base-4.12.0.0:Data.Functor e667059569e58719cf8eee08191ebb1e
import  -/  base-4.12.0.0:Data.Traversable a1295a294c330074a1316dd1dc97c6f8
import  -/  base-4.12.0.0:GHC.Base fbe365a916ebeeeb4bc1f895dbe83e42
import  -/  base-4.12.0.0:GHC.Err 3a680f55541fe399f95f794018fc3593
import  -/  base-4.12.0.0:GHC.Show fa6032f3f820e8e8ec87b97bdca4e160
import  -/  base-4.12.0.0:Prelude 80c668cb99fbafebd524c5e897f8c982
import  -/  ghc-prim-0.5.3:GHC.Classes 6002495dc43e58d28c87e5e5e058752a
import  -/  MinHS.Env 5b766e206aad32c9f714b5cb90be0cfa
  exports: db007a7dc8ec6efa23b3facdf53405a2
  Env c456e072d49a4cb967896b2b6c37de0b
  add a9fdb69ff3f5145c4e7b190f52882a5b
  addAll 76619b069f6a63681148fc87b50676cd
  empty cb4af07b989f10cfdaf3f345e7a47581
  lookup fcfffb3a33229c66d11c03f41547678b
import  -/  MinHS.Syntax a27359a8aa4022e86f719300174c8c96
  exports: d6deca1fbcb8bfd1f4cff4f1793e2d74
  App 62130ac796506c1889b28b622be3f642
  Arrow cce90732f39f8bcde85f166b8f32c476
  Bind aab6c897131a5ee041321a313d903a3d
  Bind 5cd0e4dc4577078c5458ab29323fc9fb
  Bool 04819e97eac4c85d5960daea1d3fb78d
  Con 7b1d953f557ea45487991ebc19e8f810
  Eq fb625e13f9e47f86f9b7e305adf78d84
  Exp 5cd0e4dc4577078c5458ab29323fc9fb
  Ge 8f284077881bbc0f9a9c80970ea9da18
  Gt c94cdab519f8d2d96642770e09d8c9fe
  Head 54ec73ddd00abca2f799216a0f40e756
  Id 39dd4c711cd200360082729e5c3a320f
  If d0c4aae3eca4a9a87b9c65d061aa6dd1
  Int 61ad5eddb6c9fd694d46fef0ca8e83fe
  Le f187a29fac516f2101e1d21c88f34716
  Let 8f992be72d159b4f7d08aae78343279a
  Letrec b3646e534e6548e5ad19ec1f9357e039
  List 87930e7b8a75ba50db35a2169b5e3554
  Lt 7d4e94b6c2ff1a3eec670dbd462da780
  Ne 2d3b5bf8e3f1de10a434601c20a1bdc2
  Neg 085db5a081e3fddb69a004a5ade3ef0b
  Null 18563c7cb3ff49a8818d4ce76ac20d47
  Num 82195563b36a03031bb3bffb8d56df0d
  Op 775e4e05cc11aefa57ad9c1dd3358091
  Prim 2ff43936b1baa2281a82f157d3f97079
  Program abb774a32fac37ba934a5fb26a6980a8
  Recfun c969bc342b6668a50add8f7195bdd2eb
  Tail 4a5f026ce2bfac5cd299f9a6a5c26827
  TyCon 1fed023b922d36f77991acd4b11d2098
  Type 0f0d82d3a4780c30c0769155ebac6d59
  TypeApp 377ef12d9761f502f6ecb24321ffbf1f
  TypeCon 4e21726f5aeabeabc2949d2752ea77dc
  Var 05fb7e6ba55ebe50f82496bc50b23add
5602b5973f9dc524ae941f6cd20cec8b
  $fApplicativeTC :: GHC.Base.Applicative MinHS.TypeChecker.TC
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.TypeChecker.TC
                  MinHS.TypeChecker.$fFunctorTC
                  (Data.Either.Right @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R ->_R Sym (MinHS.TypeChecker.N:TC[0]) <a>_N)
                  (Data.Either.$fApplicativeEither_$c<*>
                     @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (MinHS.TypeChecker.N:TC[0]) <a -> b>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <a>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N)
                  (Data.Either.$fApplicativeEither_$cliftA2
                     @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <a>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <c>_N)
                  (Data.Either.$fApplicativeEither_$c*>
                     @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (MinHS.TypeChecker.N:TC[0]) <a>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N)
                  (Data.Either.$fApplicativeEither_$c<*
                     @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (MinHS.TypeChecker.N:TC[0]) <a>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <a>_N) -}
8941a731651fce175cbc7484e6484b99
  $fEqKind :: GHC.Classes.Eq MinHS.TypeChecker.Kind
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.TypeChecker.Kind
                  MinHS.TypeChecker.$fEqKind_$c==
                  MinHS.TypeChecker.$fEqKind_$c/= -}
8941a731651fce175cbc7484e6484b99
  $fEqKind_$c/= ::
    MinHS.TypeChecker.Kind -> MinHS.TypeChecker.Kind -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MinHS.TypeChecker.Kind) (y :: MinHS.TypeChecker.Kind) ->
                 case MinHS.TypeChecker.$fEqKind_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
8941a731651fce175cbc7484e6484b99
  $fEqKind_$c== ::
    MinHS.TypeChecker.Kind -> MinHS.TypeChecker.Kind -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
5602b5973f9dc524ae941f6cd20cec8b
  $fFunctorTC :: GHC.Base.Functor MinHS.TypeChecker.TC
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.TypeChecker.TC
                  (Data.Either.$fApplicativeEither_$cfmap
                     @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <a>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N)
                  (Data.Either.$fFunctorEither_$c<$ @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <a>_N) -}
5602b5973f9dc524ae941f6cd20cec8b
  $fMonadFailTC :: Control.Monad.Fail.MonadFail MinHS.TypeChecker.TC
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.TypeChecker.TC
                  MinHS.TypeChecker.$fMonadTC
                  MinHS.TypeChecker.$fMonadFailTC_$cfail -}
5602b5973f9dc524ae941f6cd20cec8b
  $fMonadFailTC_$cfail :: GHC.Base.String -> MinHS.TypeChecker.TC a
  {- Arity: 1, Strictness: <B,U>x -}
5602b5973f9dc524ae941f6cd20cec8b
  $fMonadTC :: GHC.Base.Monad MinHS.TypeChecker.TC
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.TypeChecker.TC
                  MinHS.TypeChecker.$fApplicativeTC
                  (Data.Either.$fMonadEither_$c>>= @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (MinHS.TypeChecker.N:TC[0]) <a>_N
                   ->_R (<a>_R ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N)
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N)
                  (Data.Either.$fMonadEither_$c>> @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (MinHS.TypeChecker.N:TC[0]) <a>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N
                   ->_R Sym (MinHS.TypeChecker.N:TC[0]) <b>_N)
                  (Data.Either.Right @ MinHS.TypeChecker.TypeError)
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R ->_R Sym (MinHS.TypeChecker.N:TC[0]) <a>_N)
                  (\ @ a ->
                   GHC.Err.errorWithoutStackTrace
                     @ 'GHC.Types.LiftedRep
                     @ (Data.Either.Either MinHS.TypeChecker.TypeError a))
                    `cast`
                  (forall (a :: <*>_N).
                   <[GHC.Types.Char]>_R ->_R Sym (MinHS.TypeChecker.N:TC[0]) <a>_N) -}
8941a731651fce175cbc7484e6484b99
  $fShowKind :: GHC.Show.Show MinHS.TypeChecker.Kind
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.TypeChecker.Kind
                  MinHS.TypeChecker.$fShowKind_$cshowsPrec
                  MinHS.TypeChecker.$fShowKind_$cshow
                  MinHS.TypeChecker.$fShowKind_$cshowList -}
8941a731651fce175cbc7484e6484b99
  $fShowKind1 :: MinHS.TypeChecker.Kind -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (MinHS.TypeChecker.$fShowKind_$cshowsPrec
                   MinHS.TypeChecker.$fShowKind2) -}
b70243863272a85ef50094ab346c9191
  $fShowKind2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8941a731651fce175cbc7484e6484b99
  $fShowKind_$cshow :: MinHS.TypeChecker.Kind -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MinHS.TypeChecker.Kind) ->
                 MinHS.TypeChecker.$fShowKind_$cshowsPrec
                   MinHS.TypeChecker.$fShowKind2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8941a731651fce175cbc7484e6484b99
  $fShowKind_$cshowList :: [MinHS.TypeChecker.Kind] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MinHS.TypeChecker.Kind]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MinHS.TypeChecker.Kind
                   MinHS.TypeChecker.$fShowKind1
                   ls
                   s) -}
8941a731651fce175cbc7484e6484b99
  $fShowKind_$cshowsPrec ::
    GHC.Types.Int -> MinHS.TypeChecker.Kind -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
64fda8b28cc6ca465e7e430e7013505b
  $fShowTypeError :: GHC.Show.Show MinHS.TypeChecker.TypeError
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MinHS.TypeChecker.TypeError
                  MinHS.TypeChecker.$fShowTypeError_$cshowsPrec
                  MinHS.TypeChecker.$fShowTypeError_$cshow
                  MinHS.TypeChecker.$fShowTypeError_$cshowList -}
64fda8b28cc6ca465e7e430e7013505b
  $fShowTypeError1 :: MinHS.TypeChecker.TypeError -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: MinHS.TypeChecker.TypeError) ->
                 MinHS.TypeChecker.$w$cshowsPrec 0# w) -}
64fda8b28cc6ca465e7e430e7013505b
  $fShowTypeError_$cshow ::
    MinHS.TypeChecker.TypeError -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MinHS.TypeChecker.TypeError) ->
                 MinHS.TypeChecker.$fShowTypeError_$cshowsPrec
                   MinHS.TypeChecker.$fShowKind2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
64fda8b28cc6ca465e7e430e7013505b
  $fShowTypeError_$cshowList ::
    [MinHS.TypeChecker.TypeError] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MinHS.TypeChecker.TypeError]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MinHS.TypeChecker.TypeError
                   MinHS.TypeChecker.$fShowTypeError1
                   ls
                   s) -}
64fda8b28cc6ca465e7e430e7013505b
  $fShowTypeError_$cshowsPrec ::
    GHC.Types.Int -> MinHS.TypeChecker.TypeError -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: MinHS.TypeChecker.TypeError) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MinHS.TypeChecker.$w$cshowsPrec ww1 w1 }) -}
b622913ba83f06ca2e63c638dcacde56
  $tc':=> :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5022801044564707393##
                   7847687083239162463##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc':=>2
                   0#
                   MinHS.TypeChecker.$tc':=>1) -}
46624b30c1155d23979bde19a6029945
  $tc':=>1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
879bdbcf4d2e7b7410a8b9006e69caf2
  $tc':=>2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.TypeChecker.$tc':=>3) -}
6a1bc9d944ce5e23f02d772663ae1743
  $tc':=>3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("':=>"#) -}
20ee25732c1d132d323ca6189002f398
  $tc'FunctionTypeExpected :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2486739259225883638##
                   1792900755776436139##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc'FunctionTypeExpected2
                   0#
                   MinHS.TypeChecker.$tc'FunctionTypeExpected1) -}
f54487d2024d4a1b83ca65e682bfdec7
  $tc'FunctionTypeExpected1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a7f8449685b66d66049bf9c244c7a2ae
  $tc'FunctionTypeExpected2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MinHS.TypeChecker.$tc'FunctionTypeExpected3) -}
edf0a1c2b7d523ba7be02fb02c9b7827
  $tc'FunctionTypeExpected3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FunctionTypeExpected"#) -}
64877ed6f901f6e6bc4fc0a2a3f4570e
  $tc'KindMismatch :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6336332359751585414##
                   12836356519195610508##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc'KindMismatch2
                   0#
                   MinHS.TypeChecker.$tc'KindMismatch1) -}
fc15bc4d3e5d71cc9c554c145c8294d0
  $tc'KindMismatch1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
07eb95427f282acec5b9f48515487581
  $tc'KindMismatch2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MinHS.TypeChecker.$tc'KindMismatch3) -}
f8cba7e9a9ea0fe0df1440731afbbdff
  $tc'KindMismatch3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'KindMismatch"#) -}
c5ebc18a1e30cdf348ccee8d6c0131a5
  $tc'NoSuchConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6479986079862549799##
                   16695413856069531004##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc'NoSuchConstructor2
                   0#
                   MinHS.TypeChecker.$tc'NoSuchConstructor1) -}
d35bcf95d046671eab5999358d766f8f
  $tc'NoSuchConstructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
aebdf1b0ebae7897482283164fa7c9fd
  $tc'NoSuchConstructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MinHS.TypeChecker.$tc'NoSuchConstructor3) -}
cfe3e07320e92cc44c985cc0c28a804e
  $tc'NoSuchConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NoSuchConstructor"#) -}
470ea276d821d14b872f83eec47b55d3
  $tc'NoSuchVariable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10905074502810184789##
                   4712922470111671306##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc'NoSuchVariable1
                   0#
                   MinHS.TypeChecker.$tc'NoSuchConstructor1) -}
c64c4be09b6d37c010f5dc97582e1240
  $tc'NoSuchVariable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MinHS.TypeChecker.$tc'NoSuchVariable2) -}
55eb32537722018b153bb94d037f9cc8
  $tc'NoSuchVariable2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NoSuchVariable"#) -}
1ba110f9055a5545c0121c6a7b404cc9
  $tc'Star :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10997098330233547486##
                   15210265982525344054##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc'Star2
                   0#
                   MinHS.TypeChecker.$tc'Star1) -}
594fb42b02337645a673723d2b3b2769
  $tc'Star1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
314d971e0993dcaa7741e23efe8cd1f4
  $tc'Star2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.TypeChecker.$tc'Star3) -}
c977f6a3e79fa8cb940f906fbdb27076
  $tc'Star3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Star"#) -}
6f36d68501ec964f7ece6d5c3d2dcfc9
  $tc'TC :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8686903593722347275##
                   2465225680945256309##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc'TC2
                   1#
                   MinHS.TypeChecker.$tc'TC1) -}
77507beabd960e47967c34907f7e22b5
  $tc'TC1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
05d1e71399247a8e318465f33e516aa0
  $tc'TC2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.TypeChecker.$tc'TC3) -}
df6fd7ee26984f14e33aa9c48f7eba4c
  $tc'TC3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TC"#) -}
4d1144b356067899ab0ef81668d26696
  $tc'TypeConstructorSaturated :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2796567205298860562##
                   15047486090579089390##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc'TypeConstructorSaturated2
                   0#
                   MinHS.TypeChecker.$tc'TypeConstructorSaturated1) -}
7f24b075e1574891d97c796d1d1a79c3
  $tc'TypeConstructorSaturated1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0e8b07f06d56d3a8110bd82eae5122bd
  $tc'TypeConstructorSaturated2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MinHS.TypeChecker.$tc'TypeConstructorSaturated3) -}
1a13451ddeb17f77f04a37e73769f603
  $tc'TypeConstructorSaturated3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeConstructorSaturated"#) -}
f07480848f8a771e6e6db33ddf6ccbd3
  $tc'TypeMismatch :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   158007472044668955##
                   15896031173095695876##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc'TypeMismatch2
                   0#
                   MinHS.TypeChecker.$tc'TypeMismatch1) -}
58c633b353278a05a8edbc4b2f44f0f0
  $tc'TypeMismatch1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f3681d41ced4ea3d35f8c0ea72c2944b
  $tc'TypeMismatch2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MinHS.TypeChecker.$tc'TypeMismatch3) -}
516360b550cdfda37f7a08854418c044
  $tc'TypeMismatch3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeMismatch"#) -}
eefec4a11a3d998e037ad097ebad9538
  $tc'TypeShouldBeFunction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15877271452497192382##
                   18255835183390916201##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tc'TypeShouldBeFunction2
                   0#
                   MinHS.TypeChecker.$tc'TypeShouldBeFunction1) -}
acb44c8f135675e7e2dc8868c6ba91c1
  $tc'TypeShouldBeFunction1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c347d1d5e347923036b0e6da28e3f973
  $tc'TypeShouldBeFunction2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MinHS.TypeChecker.$tc'TypeShouldBeFunction3) -}
1d01d90f5f0447761b87bbfc5f132fcd
  $tc'TypeShouldBeFunction3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeShouldBeFunction"#) -}
10b93c2f9f647df86fc68e56d3e115a1
  $tcKind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7974146932028047969##
                   13520552342000526880##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tcKind1
                   0#
                   GHC.Types.krep$*) -}
50ae6633e77b46473291575036ce9aae
  $tcKind1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.TypeChecker.$tcKind2) -}
70aedb0dfe5fed6e337bcfa17161862c
  $tcKind2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Kind"#) -}
dbe4c3a6db3c232f0d4eada1e4136829
  $tcTC :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3180535844028306939##
                   5248517211857701115##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tcTC1
                   0#
                   GHC.Types.krep$*Arr*) -}
9bd643b2d247cbae872f3e38f77c5a02
  $tcTC1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.TypeChecker.$tcTC2) -}
3228f3aeea3b29b9f23c289d1ec009a6
  $tcTC2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TC"#) -}
43f09318a343898a752a1aaab9a9fd94
  $tcTypeError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6755013464549278413##
                   15607231255923894209##
                   MinHS.TypeChecker.$trModule
                   MinHS.TypeChecker.$tcTypeError1
                   0#
                   GHC.Types.krep$*) -}
a92f75d927e90576fff73158f1e0da85
  $tcTypeError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.TypeChecker.$tcTypeError2) -}
8bf3a78fab30b8e70dd5152c3b1b95a1
  $tcTypeError2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeError"#) -}
2f8ddc41b322af1cd478ac1ed4ad18de
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MinHS.TypeChecker.$trModule3
                   MinHS.TypeChecker.$trModule1) -}
ed6eff26efb35b364aec573060ae7787
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.TypeChecker.$trModule2) -}
f4bc796239c0697a3002c61063290ff7
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MinHS.TypeChecker"#) -}
7ee21136e140ebd7f06836cf4cf8a0c4
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MinHS.TypeChecker.$trModule4) -}
0672efe282607593a24a8d3cb0b38953
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
64fda8b28cc6ca465e7e430e7013505b
  $w$cshowsPrec ::
    GHC.Prim.Int# -> MinHS.TypeChecker.TypeError -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [2] -}
c3c972a67357f1fb79385daaf5f314cb
  $wcheckAbs ::
    MinHS.TypeChecker.Gamma
    -> MinHS.Syntax.Id
    -> MinHS.Syntax.Type
    -> [MinHS.Syntax.Id]
    -> MinHS.Syntax.Exp
    -> MinHS.TypeChecker.TC ()
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><S,1*U><L,U>,
     Inline: [2] -}
ed094fcce52904c968f7e87e70675522
  $wcheckBind ::
    MinHS.TypeChecker.Gamma
    -> MinHS.Syntax.Id
    -> MinHS.Syntax.Type
    -> [MinHS.Syntax.Id]
    -> MinHS.Syntax.Exp
    -> MinHS.TypeChecker.TC (MinHS.Syntax.Id, MinHS.Syntax.Type)
  {- Arity: 5, Strictness: <L,U><L,U><S,U><L,1*U><L,U>, Inline: [2],
     Unfolding: (\ (w :: MinHS.TypeChecker.Gamma)
                   (ww :: MinHS.Syntax.Id)
                   (ww1 :: MinHS.Syntax.Type)
                   (ww2 :: [MinHS.Syntax.Id])
                   (ww3 :: MinHS.Syntax.Exp) ->
                 case (MinHS.TypeChecker.typeWellformed ww1)
                        `cast`
                      (MinHS.TypeChecker.N:TC[0] <MinHS.TypeChecker.Kind>_N) of wild {
                   Data.Either.Left l
                   -> (Data.Either.Left
                         @ MinHS.TypeChecker.TypeError
                         @ (MinHS.Syntax.Id, MinHS.Syntax.Type)
                         l)
                        `cast`
                      (Sym (MinHS.TypeChecker.N:TC[0]) <(MinHS.Syntax.Id,
                                                         MinHS.Syntax.Type)>_N)
                   Data.Either.Right r
                   -> case MinHS.TypeChecker.$fEqKind_$c==
                             MinHS.TypeChecker.Star
                             r of wild1 {
                        GHC.Types.False
                        -> (Data.Either.Left
                              @ MinHS.TypeChecker.TypeError
                              @ (MinHS.Syntax.Id, MinHS.Syntax.Type)
                              (MinHS.TypeChecker.KindMismatch MinHS.TypeChecker.Star r ww1))
                             `cast`
                           (Sym (MinHS.TypeChecker.N:TC[0]) <(MinHS.Syntax.Id,
                                                              MinHS.Syntax.Type)>_N)
                        GHC.Types.True
                        -> case (MinHS.TypeChecker.$wcheckAbs w ww ww1 ww2 ww3)
                                  `cast`
                                (MinHS.TypeChecker.N:TC[0] <()>_N) of wild2 {
                             Data.Either.Left l
                             -> (Data.Either.Left
                                   @ MinHS.TypeChecker.TypeError
                                   @ (MinHS.Syntax.Id, MinHS.Syntax.Type)
                                   l)
                                  `cast`
                                (Sym (MinHS.TypeChecker.N:TC[0]) <(MinHS.Syntax.Id,
                                                                   MinHS.Syntax.Type)>_N)
                             Data.Either.Right r1
                             -> (Data.Either.Right
                                   @ MinHS.TypeChecker.TypeError
                                   @ (MinHS.Syntax.Id, MinHS.Syntax.Type)
                                   (ww, ww1))
                                  `cast`
                                (Sym (MinHS.TypeChecker.N:TC[0]) <(MinHS.Syntax.Id,
                                                                   MinHS.Syntax.Type)>_N) } } }) -}
1ce6b28b266bfcb1b48124f07a79a254
  type Gamma = MinHS.Env.Env MinHS.Syntax.Type
8941a731651fce175cbc7484e6484b99
  data Kind
    = Star | (:=>) MinHS.TypeChecker.Kind MinHS.TypeChecker.Kind
5602b5973f9dc524ae941f6cd20cec8b
  newtype TC a
    = TC (Data.Either.Either MinHS.TypeChecker.TypeError a)
64fda8b28cc6ca465e7e430e7013505b
  data TypeError
    = TypeMismatch MinHS.Syntax.Type MinHS.Syntax.Type MinHS.Syntax.Exp
    | TypeShouldBeFunction MinHS.Syntax.Type MinHS.Syntax.Bind
    | FunctionTypeExpected MinHS.Syntax.Exp MinHS.Syntax.Type
    | NoSuchVariable MinHS.Syntax.Id
    | NoSuchConstructor MinHS.Syntax.Id
    | TypeConstructorSaturated MinHS.Syntax.Type MinHS.TypeChecker.Kind
    | KindMismatch MinHS.TypeChecker.Kind
                   MinHS.TypeChecker.Kind
                   MinHS.Syntax.Type
8eb4fe96cf8ac60f39dae1e251e7a858
  checkAbs ::
    MinHS.TypeChecker.Gamma
    -> MinHS.Syntax.Bind -> MinHS.TypeChecker.TC ()
  {- Arity: 2, Strictness: <L,U><S(LSSL),1*U(U,1*U,1*U,U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MinHS.TypeChecker.Gamma) (w1 :: MinHS.Syntax.Bind) ->
                 case w1 of ww { MinHS.Syntax.Bind ww1 ww2 ww3 ww4 ->
                 MinHS.TypeChecker.$wcheckAbs w ww1 ww2 ww3 ww4 }) -}
8021a1b78f3fef1e0d0bd14754170ddf
  checkBind ::
    MinHS.TypeChecker.Gamma
    -> MinHS.Syntax.Bind
    -> MinHS.TypeChecker.TC (MinHS.Syntax.Id, MinHS.Syntax.Type)
  {- Arity: 2, Strictness: <L,U><S(LSLL),1*U(U,U,1*U,U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MinHS.TypeChecker.Gamma) (w1 :: MinHS.Syntax.Bind) ->
                 case w1 of ww { MinHS.Syntax.Bind ww1 ww2 ww3 ww4 ->
                 MinHS.TypeChecker.$wcheckBind w ww1 ww2 ww3 ww4 }) -}
6e32f51498bacf2d5432d49925256287
  checkBinds ::
    MinHS.TypeChecker.Gamma
    -> MinHS.Syntax.Program
    -> MinHS.TypeChecker.TC MinHS.TypeChecker.Gamma
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
d32b710851bf3b971dfe89dc153633c9
  checkBinds' ::
    MinHS.TypeChecker.Gamma
    -> MinHS.Syntax.Program -> MinHS.TypeChecker.TC ()
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
aed49897b7d0e4860c5bc5052adb1c9d
  checkExp ::
    MinHS.TypeChecker.Gamma
    -> MinHS.Syntax.Exp -> MinHS.TypeChecker.TC MinHS.Syntax.Type
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
63d853af2c12ae5ba7abaa0882c37c92
  constructorType ::
    MinHS.Syntax.Id -> GHC.Maybe.Maybe MinHS.Syntax.Type
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (ds :: [GHC.Types.Char]) ->
                 case GHC.Base.eqString
                        ds
                        MinHS.TypeChecker.constructorType16 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString
                             ds
                             MinHS.TypeChecker.constructorType14 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString
                                  ds
                                  MinHS.TypeChecker.constructorType12 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString
                                       ds
                                       MinHS.TypeChecker.constructorType10 of wild3 {
                                  GHC.Types.False -> GHC.Maybe.Nothing @ MinHS.Syntax.Type
                                  GHC.Types.True -> MinHS.TypeChecker.constructorType8 }
                             GHC.Types.True -> MinHS.TypeChecker.constructorType7 }
                        GHC.Types.True -> MinHS.TypeChecker.constructorType8 }
                   GHC.Types.True -> MinHS.TypeChecker.constructorType1 }) -}
6051aa72a2a63319a2a2091429dc01ff
  constructorType1 :: GHC.Maybe.Maybe MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ MinHS.Syntax.Type
                   MinHS.TypeChecker.constructorType2) -}
78d8c4ff5a7d8714e8ae4bac0570d8fe
  constructorType10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.TypeChecker.constructorType11) -}
3d3d47d1adadfcc411836d919cdc26c5
  constructorType11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("True"#) -}
498c2bcb7335a7cfc26531640a1c1e13
  constructorType12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.TypeChecker.constructorType13) -}
15d1bcdea14f213f0e639828125c897c
  constructorType13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Nil"#) -}
259660eab40c0dc297904a73fee29502
  constructorType14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.TypeChecker.constructorType15) -}
9e84c7a8e62dcf184931978484abfead
  constructorType15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("False"#) -}
59d6c0fcf37150c4963bfae6e32affc0
  constructorType16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MinHS.TypeChecker.constructorType17) -}
beb45e623ff0823ad2ef568b4219c08d
  constructorType17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Cons"#) -}
20bfad74d90893ae605d7fb898f75ac2
  constructorType2 :: MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (MinHS.Syntax.Arrow
                   MinHS.TypeChecker.constructorType5
                   MinHS.TypeChecker.constructorType3) -}
e1a68f67654fd4ab17716aa7436a3a1b
  constructorType3 :: MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (MinHS.Syntax.Arrow
                   MinHS.TypeChecker.constructorType4
                   MinHS.TypeChecker.constructorType4) -}
20e43345c3327c362991c575bc161613
  constructorType4 :: MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (MinHS.Syntax.TypeApp
                   MinHS.TypeChecker.constructorType6
                   MinHS.TypeChecker.constructorType5) -}
d0afea9a5f005e47b3262a71dbd37410
  constructorType5 :: MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (MinHS.Syntax.TypeCon MinHS.Syntax.Int) -}
daa1f62cfbea857df43a2a15a7718b34
  constructorType6 :: MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (MinHS.Syntax.TypeCon MinHS.Syntax.List) -}
21fae3f9d2cd7afe23f63d18251bec8e
  constructorType7 :: GHC.Maybe.Maybe MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ MinHS.Syntax.Type
                   MinHS.TypeChecker.constructorType4) -}
0e1b02d0c9064248a412b2258499c7dc
  constructorType8 :: GHC.Maybe.Maybe MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ MinHS.Syntax.Type
                   MinHS.TypeChecker.constructorType9) -}
3dee7f0d4887e10bcb56b728bd6b79ea
  constructorType9 :: MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (MinHS.Syntax.TypeCon MinHS.Syntax.Bool) -}
88f9e19df40b2403fba1b04643277a2c
  initialGamma :: MinHS.TypeChecker.Gamma
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                (Data.Map.Internal.Tip @ GHC.Base.String @ MinHS.Syntax.Type)
                  `cast`
                (Sym (MinHS.Env.N:Env[0]) <MinHS.Syntax.Type>_N) -}
f090e5b74693910cecde904a4cd23e99
  ofKind ::
    MinHS.Syntax.Type
    -> MinHS.TypeChecker.Kind -> MinHS.TypeChecker.TC ()
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                MinHS.TypeChecker.ofKind1
                  `cast`
                (<MinHS.Syntax.Type>_R
                 ->_R <MinHS.TypeChecker.Kind>_R
                 ->_R Sym (MinHS.TypeChecker.N:TC[0]) <()>_N) -}
ee24c3ce5d1514a086fc804b310d2af1
  ofKind1 ::
    MinHS.Syntax.Type
    -> MinHS.TypeChecker.Kind
    -> Data.Either.Either MinHS.TypeChecker.TypeError ()
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U>,
     Unfolding: (\ (t :: MinHS.Syntax.Type)
                   (k :: MinHS.TypeChecker.Kind) ->
                 case (MinHS.TypeChecker.typeWellformed t)
                        `cast`
                      (MinHS.TypeChecker.N:TC[0] <MinHS.TypeChecker.Kind>_N) of wild {
                   Data.Either.Left l
                   -> Data.Either.Left @ MinHS.TypeChecker.TypeError @ () l
                   Data.Either.Right r
                   -> case MinHS.TypeChecker.$fEqKind_$c== k r of wild1 {
                        GHC.Types.False
                        -> Data.Either.Left
                             @ MinHS.TypeChecker.TypeError
                             @ ()
                             (MinHS.TypeChecker.KindMismatch k r t)
                        GHC.Types.True -> MinHS.TypeChecker.ofKind2 } }) -}
b5ca2981f8c42436af890b5f2ee21d8e
  ofKind2 :: Data.Either.Either MinHS.TypeChecker.TypeError ()
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ MinHS.TypeChecker.TypeError
                   @ ()
                   GHC.Tuple.()) -}
4572e7f6c254d14543189af4425bd8aa
  primOpType :: MinHS.Syntax.Op -> MinHS.Syntax.Type
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m1, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MinHS.Syntax.Op) ->
                 case w of wild {
                   DEFAULT
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType5
                        MinHS.TypeChecker.primOpType2
                   MinHS.Syntax.Neg
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType5
                        MinHS.TypeChecker.constructorType5
                   MinHS.Syntax.Gt
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType5
                        MinHS.TypeChecker.primOpType1
                   MinHS.Syntax.Ge
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType5
                        MinHS.TypeChecker.primOpType1
                   MinHS.Syntax.Lt
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType5
                        MinHS.TypeChecker.primOpType1
                   MinHS.Syntax.Le
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType5
                        MinHS.TypeChecker.primOpType1
                   MinHS.Syntax.Eq
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType5
                        MinHS.TypeChecker.primOpType1
                   MinHS.Syntax.Ne
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType5
                        MinHS.TypeChecker.primOpType1
                   MinHS.Syntax.Head
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType4
                        MinHS.TypeChecker.constructorType5
                   MinHS.Syntax.Tail
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType4
                        MinHS.TypeChecker.constructorType4
                   MinHS.Syntax.Null
                   -> MinHS.Syntax.Arrow
                        MinHS.TypeChecker.constructorType4
                        MinHS.TypeChecker.constructorType9 }) -}
7357846d462b6fc2840ea9244bc24a0c
  primOpType1 :: MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (MinHS.Syntax.Arrow
                   MinHS.TypeChecker.constructorType5
                   MinHS.TypeChecker.constructorType9) -}
ba14f8929c7b50357bfbdec52aaf676c
  primOpType2 :: MinHS.Syntax.Type
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (MinHS.Syntax.Arrow
                   MinHS.TypeChecker.constructorType5
                   MinHS.TypeChecker.constructorType5) -}
6a627849cd3e5bc4b7cce68a622eb5c9
  runTC ::
    MinHS.TypeChecker.TC ()
    -> GHC.Maybe.Maybe MinHS.TypeChecker.TypeError
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MinHS.TypeChecker.TC ()) ->
                 case ds `cast` (MinHS.TypeChecker.N:TC[0] <()>_N) of wild {
                   Data.Either.Left err
                   -> GHC.Maybe.Just @ MinHS.TypeChecker.TypeError err
                   Data.Either.Right ds1
                   -> case ds1 of wild1 { () ->
                      GHC.Maybe.Nothing @ MinHS.TypeChecker.TypeError } }) -}
36a2f6612b2821ca01c5f98c9584c398
  shouldCheck ::
    MinHS.TypeChecker.Gamma
    -> MinHS.Syntax.Exp -> MinHS.Syntax.Type -> MinHS.TypeChecker.TC ()
  {- Arity: 3, Strictness: <L,U><S,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                MinHS.TypeChecker.shouldCheck1
                  `cast`
                (<MinHS.TypeChecker.Gamma>_R
                 ->_R <MinHS.Syntax.Exp>_R
                 ->_R <MinHS.Syntax.Type>_R
                 ->_R Sym (MinHS.TypeChecker.N:TC[0]) <()>_N) -}
225776fee2c574282546092cb5011c4a
  shouldCheck1 ::
    MinHS.TypeChecker.Gamma
    -> MinHS.Syntax.Exp
    -> MinHS.Syntax.Type
    -> Data.Either.Either MinHS.TypeChecker.TypeError ()
  {- Arity: 3, Strictness: <L,U><S,U><L,U>,
     Unfolding: (\ (g :: MinHS.TypeChecker.Gamma)
                   (exp :: MinHS.Syntax.Exp)
                   (t :: MinHS.Syntax.Type) ->
                 case (MinHS.TypeChecker.checkExp g exp)
                        `cast`
                      (MinHS.TypeChecker.N:TC[0] <MinHS.Syntax.Type>_N) of wild {
                   Data.Either.Left l
                   -> Data.Either.Left @ MinHS.TypeChecker.TypeError @ () l
                   Data.Either.Right r
                   -> case MinHS.Syntax.$fEqBind_$c==2 r t of wild1 {
                        GHC.Types.False
                        -> Data.Either.Left
                             @ MinHS.TypeChecker.TypeError
                             @ ()
                             (MinHS.TypeChecker.TypeMismatch t r exp)
                        GHC.Types.True -> MinHS.TypeChecker.ofKind2 } }) -}
8379ea3641b09afd0564a0cb640ac6c4
  tyConKind :: MinHS.Syntax.TyCon -> MinHS.TypeChecker.Kind
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MinHS.Syntax.TyCon) ->
                 case ds of wild {
                   DEFAULT -> MinHS.TypeChecker.Star
                   MinHS.Syntax.List -> MinHS.TypeChecker.tyConKind1 }) -}
e9c37f3e6e4ec223040aeb67f8698107
  tyConKind1 :: MinHS.TypeChecker.Kind
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (MinHS.TypeChecker.:=>
                   MinHS.TypeChecker.Star
                   MinHS.TypeChecker.Star) -}
90e99aba6adad6dc8d6bf08bc904e4c6
  typeError :: MinHS.TypeChecker.TypeError -> MinHS.TypeChecker.TC a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m1,
     Unfolding: InlineRule (0, True, True)
                (Data.Either.Left @ MinHS.TypeChecker.TypeError)
                  `cast`
                (forall (a :: <*>_N).
                 <MinHS.TypeChecker.TypeError>_R
                 ->_R Sym (MinHS.TypeChecker.N:TC[0]) <a>_N) -}
1095a35402bb67a05a19887fd7c4ef67
  typeWellformed ::
    MinHS.Syntax.Type -> MinHS.TypeChecker.TC MinHS.TypeChecker.Kind
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
55c344826501c0f05a6f769099881527
  typecheck ::
    MinHS.Syntax.Program -> GHC.Maybe.Maybe MinHS.TypeChecker.TypeError
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MinHS.Syntax.Program) ->
                 case (MinHS.TypeChecker.checkBinds
                         (Data.Map.Internal.Tip @ GHC.Base.String @ MinHS.Syntax.Type)
                           `cast`
                         (Sym (MinHS.Env.N:Env[0]) <MinHS.Syntax.Type>_N)
                         x)
                        `cast`
                      (MinHS.TypeChecker.N:TC[0] <MinHS.TypeChecker.Gamma>_N) of wild {
                   Data.Either.Left x1
                   -> GHC.Maybe.Just @ MinHS.TypeChecker.TypeError x1
                   Data.Either.Right y
                   -> GHC.Maybe.Nothing @ MinHS.TypeChecker.TypeError }) -}
instance GHC.Base.Applicative [MinHS.TypeChecker.TC]
  = MinHS.TypeChecker.$fApplicativeTC
instance GHC.Classes.Eq [MinHS.TypeChecker.Kind]
  = MinHS.TypeChecker.$fEqKind
instance GHC.Base.Functor [MinHS.TypeChecker.TC]
  = MinHS.TypeChecker.$fFunctorTC
instance Control.Monad.Fail.MonadFail [MinHS.TypeChecker.TC]
  = MinHS.TypeChecker.$fMonadFailTC
instance GHC.Base.Monad [MinHS.TypeChecker.TC]
  = MinHS.TypeChecker.$fMonadTC
instance GHC.Show.Show [MinHS.TypeChecker.Kind]
  = MinHS.TypeChecker.$fShowKind
instance GHC.Show.Show [MinHS.TypeChecker.TypeError]
  = MinHS.TypeChecker.$fShowTypeError
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

